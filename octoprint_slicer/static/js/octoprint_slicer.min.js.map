{"version":3,"file":null,"sources":["../../../node_modules/3tk/dist/3tk.module.js","../../../src/STLViewPort.js","../../../src/profile_overrides.js","../../../src/ModelArranger.js","../../../src/slicer.js"],"sourcesContent":["import { BoxBufferGeometry, BoxGeometry, BufferAttribute, BufferGeometry, CylinderBufferGeometry, CylinderGeometry, DefaultLoadingManager, DoubleSide, Euler, EventDispatcher, FileLoader, Float32BufferAttribute, FrontSide, Geometry, Line, LineBasicMaterial, MOUSE, Matrix3, Matrix4, Mesh, MeshBasicMaterial, Object3D, OctahedronGeometry, OrbitControls, OrthographicCamera, PerspectiveCamera, PlaneBufferGeometry, Quaternion, Raycaster, Spherical, TorusBufferGeometry, TransformGizmo, Vector2, Vector3 } from 'three';\nimport * as THREE from 'three';\n\n/**\n * @author arodic / https://github.com/arodic\n */\n\nfunction DefaultHandles() {\n\n    var GizmoMaterial = function GizmoMaterial(parameters) {\n\n        MeshBasicMaterial.call(this);\n\n        this.depthTest = false;\n        this.depthWrite = false;\n        this.side = FrontSide;\n        this.transparent = true;\n\n        this.setValues(parameters);\n\n        this.oldColor = this.color.clone();\n        this.oldOpacity = this.opacity;\n\n        this.highlight = function (highlighted) {\n\n            if (highlighted) {\n\n                this.color.setRGB(1, 1, 0);\n                this.opacity = 1;\n            } else {\n\n                this.color.copy(this.oldColor);\n                this.opacity = this.oldOpacity;\n            }\n        };\n    };\n\n    GizmoMaterial.prototype = Object.create(MeshBasicMaterial.prototype);\n    GizmoMaterial.prototype.constructor = GizmoMaterial;\n\n    var GizmoLineMaterial = function GizmoLineMaterial(parameters) {\n\n        LineBasicMaterial.call(this);\n\n        this.depthTest = false;\n        this.depthWrite = false;\n        this.transparent = true;\n        this.linewidth = 1;\n\n        this.setValues(parameters);\n\n        this.oldColor = this.color.clone();\n        this.oldOpacity = this.opacity;\n\n        this.highlight = function (highlighted) {\n\n            if (highlighted) {\n\n                this.color.setRGB(1, 1, 0);\n                this.opacity = 1;\n            } else {\n\n                this.color.copy(this.oldColor);\n                this.opacity = this.oldOpacity;\n            }\n        };\n    };\n\n    GizmoLineMaterial.prototype = Object.create(LineBasicMaterial.prototype);\n    GizmoLineMaterial.prototype.constructor = GizmoLineMaterial;\n\n    var invisibleMaterial = new GizmoMaterial({ visible: false, transparent: false });\n\n    var gizmoFromMap = function gizmoFromMap(gizmoMap) {\n\n        var gizmo = new Object3D();\n\n        for (var name in gizmoMap) {\n\n            for (var i = gizmoMap[name].length; i--;) {\n\n                var object = gizmoMap[name][i][0];\n                var position = gizmoMap[name][i][1];\n                var rotation = gizmoMap[name][i][2];\n\n                object.name = name;\n\n                if (position) object.position.set(position[0], position[1], position[2]);\n                if (rotation) object.rotation.set(rotation[0], rotation[1], rotation[2]);\n\n                gizmo.add(object);\n            }\n        }\n\n        return gizmo;\n    };\n\n    this.translateHandles = function () {\n        var arrowGeometry = new Geometry();\n        var mesh = new Mesh(new CylinderGeometry(0, 0.05, 0.2, 12, 1, false));\n        mesh.position.y = 0.5;\n        mesh.updateMatrix();\n\n        arrowGeometry.merge(mesh.geometry, mesh.matrix);\n\n        var lineXGeometry = new BufferGeometry();\n        lineXGeometry.addAttribute('position', new Float32BufferAttribute([0, 0, 0, 1, 0, 0], 3));\n\n        var lineYGeometry = new BufferGeometry();\n        lineYGeometry.addAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n        var lineZGeometry = new BufferGeometry();\n        lineZGeometry.addAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\n        return gizmoFromMap({\n            X: [[new Mesh(arrowGeometry, new GizmoMaterial({ color: 0xff0000 })), [0.5, 0, 0], [0, 0, -Math.PI / 2]], [new Line(lineXGeometry, new GizmoLineMaterial({ color: 0xff0000 }))], [new Mesh(new CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), invisibleMaterial), [0.6, 0, 0], [0, 0, -Math.PI / 2]]],\n\n            Y: [[new Mesh(arrowGeometry, new GizmoMaterial({ color: 0x00ff00 })), [0, 0.5, 0]], [new Line(lineYGeometry, new GizmoLineMaterial({ color: 0x00ff00 }))], [new Mesh(new CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), invisibleMaterial), [0, 0.6, 0]]],\n\n            Z: [[new Mesh(arrowGeometry, new GizmoMaterial({ color: 0x0000ff })), [0, 0, 0.5], [Math.PI / 2, 0, 0]], [new Line(lineZGeometry, new GizmoLineMaterial({ color: 0x0000ff }))], [new Mesh(new CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), invisibleMaterial), [0, 0, 0.6], [Math.PI / 2, 0, 0]]],\n\n            XYZ: [[new Mesh(new OctahedronGeometry(0.1, 0), new GizmoMaterial({ color: 0xffffff, opacity: 0.25 })), [0, 0, 0], [0, 0, 0]], [new Mesh(new OctahedronGeometry(0.2, 0), invisibleMaterial)]],\n\n            XY: [[new Mesh(new PlaneBufferGeometry(0.29, 0.29), new GizmoMaterial({ color: 0xffff00, opacity: 0.25 })), [0.15, 0.15, 0]], [new Mesh(new PlaneBufferGeometry(0.4, 0.4), invisibleMaterial), [0.2, 0.2, 0]]],\n\n            YZ: [[new Mesh(new PlaneBufferGeometry(0.29, 0.29), new GizmoMaterial({ color: 0x00ffff, opacity: 0.25 })), [0, 0.15, 0.15], [0, Math.PI / 2, 0]], [new Mesh(new PlaneBufferGeometry(0.4, 0.4), invisibleMaterial), [0, 0.2, 0.2], [0, Math.PI / 2, 0]]],\n\n            XZ: [[new Mesh(new PlaneBufferGeometry(0.29, 0.29), new GizmoMaterial({ color: 0xff00ff, opacity: 0.25 })), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]], [new Mesh(new PlaneBufferGeometry(0.4, 0.4), invisibleMaterial), [0.2, 0, 0.2], [-Math.PI / 2, 0, 0]]]\n\n        });\n    };\n\n    this.rotateHandles = function () {\n\n        var CircleGeometry = function CircleGeometry(radius, facing, arc) {\n\n            var geometry = new BufferGeometry();\n            var vertices = [];\n            arc = arc ? arc : 1;\n\n            for (var i = 0; i <= 64 * arc; ++i) {\n\n                if (facing === 'x') vertices.push(0, Math.cos(i / 32 * Math.PI) * radius, Math.sin(i / 32 * Math.PI) * radius);\n                if (facing === 'y') vertices.push(Math.cos(i / 32 * Math.PI) * radius, 0, Math.sin(i / 32 * Math.PI) * radius);\n                if (facing === 'z') vertices.push(Math.sin(i / 32 * Math.PI) * radius, Math.cos(i / 32 * Math.PI) * radius, 0);\n            }\n\n            geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n            return geometry;\n        };\n\n        return gizmoFromMap({\n            X: [[new Line(new CircleGeometry(1, 'x', 0.5), new GizmoLineMaterial({ color: 0xff0000 }))], [new Mesh(new TorusBufferGeometry(1, 0.12, 4, 12, Math.PI), invisibleMaterial), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2]]],\n\n            Y: [[new Line(new CircleGeometry(1, 'y', 0.5), new GizmoLineMaterial({ color: 0x00ff00 }))], [new Mesh(new TorusBufferGeometry(1, 0.12, 4, 12, Math.PI), invisibleMaterial), [0, 0, 0], [Math.PI / 2, 0, 0]]],\n\n            Z: [[new Line(new CircleGeometry(1, 'z', 0.5), new GizmoLineMaterial({ color: 0x0000ff }))], [new Mesh(new TorusBufferGeometry(1, 0.12, 4, 12, Math.PI), invisibleMaterial), [0, 0, 0], [0, 0, -Math.PI / 2]]],\n\n            E: [[new Line(new CircleGeometry(1.25, 'z', 1), new GizmoLineMaterial({ color: 0xcccc00 }))], [new Mesh(new TorusBufferGeometry(1.25, 0.12, 2, 24), invisibleMaterial)]],\n\n            XYZE: [[new Line(new CircleGeometry(1, 'z', 1), new GizmoLineMaterial({ color: 0x787878 }))], [new Mesh()] // TODO\n            ]\n        });\n    };\n\n    this.scaleHandles = function () {\n        var arrowGeometry = new Geometry();\n        var mesh = new Mesh(new BoxGeometry(0.125, 0.125, 0.125));\n        mesh.position.y = 0.5;\n        mesh.updateMatrix();\n\n        arrowGeometry.merge(mesh.geometry, mesh.matrix);\n\n        var lineXGeometry = new BufferGeometry();\n        lineXGeometry.addAttribute('position', new Float32BufferAttribute([0, 0, 0, 1, 0, 0], 3));\n\n        var lineYGeometry = new BufferGeometry();\n        lineYGeometry.addAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n        var lineZGeometry = new BufferGeometry();\n        lineZGeometry.addAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\n        return gizmoFromMap({\n            X: [[new Mesh(arrowGeometry, new GizmoMaterial({ color: 0xff0000 })), [0.5, 0, 0], [0, 0, -Math.PI / 2]], [new Line(lineXGeometry, new GizmoLineMaterial({ color: 0xff0000 }))], [new Mesh(new CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), invisibleMaterial), [0.6, 0, 0], [0, 0, -Math.PI / 2]]],\n\n            Y: [[new Mesh(arrowGeometry, new GizmoMaterial({ color: 0x00ff00 })), [0, 0.5, 0]], [new Line(lineYGeometry, new GizmoLineMaterial({ color: 0x00ff00 }))], [new Mesh(new CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), invisibleMaterial), [0, 0.6, 0]]],\n\n            Z: [[new Mesh(arrowGeometry, new GizmoMaterial({ color: 0x0000ff })), [0, 0, 0.5], [Math.PI / 2, 0, 0]], [new Line(lineZGeometry, new GizmoLineMaterial({ color: 0x0000ff }))], [new Mesh(new CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), invisibleMaterial), [0, 0, 0.6], [Math.PI / 2, 0, 0]]],\n\n            XYZ: [[new Mesh(new BoxBufferGeometry(0.125, 0.125, 0.125), new GizmoMaterial({ color: 0xffffff, opacity: 0.25 }))], [new Mesh(new BoxBufferGeometry(0.4, 0.4, 0.4), invisibleMaterial)]]\n        });\n    };\n}\n\nfunction TransformGizmo$1(handles) {\n\n    this.handles = handles;\n\n    this.init = function () {\n\n        Object3D.call(this);\n\n        this.add(this.handles);\n\n        this.planes = new Object3D();\n        this.add(this.planes);\n\n        //// PLANES\n\n        var planeGeometry = new PlaneBufferGeometry(50, 50, 2, 2);\n        var planeMaterial = new MeshBasicMaterial({ visible: false, side: DoubleSide });\n\n        var planes = {\n            \"XY\": new Mesh(planeGeometry, planeMaterial),\n            \"YZ\": new Mesh(planeGeometry, planeMaterial),\n            \"XZ\": new Mesh(planeGeometry, planeMaterial),\n            \"XYZE\": new Mesh(planeGeometry, planeMaterial)\n        };\n\n        this.activePlane = planes[\"XYZE\"];\n\n        planes[\"YZ\"].rotation.set(0, Math.PI / 2, 0);\n        planes[\"XZ\"].rotation.set(-Math.PI / 2, 0, 0);\n\n        for (var i in planes) {\n\n            planes[i].name = i;\n            this.planes.add(planes[i]);\n            this.planes[i] = planes[i];\n        }\n\n        // reset Transformations\n\n        this.traverse(function (child) {\n\n            if (child instanceof Mesh) {\n\n                child.updateMatrix();\n\n                var tempGeometry = child.geometry.clone();\n                tempGeometry.applyMatrix(child.matrix);\n                child.geometry = tempGeometry;\n\n                child.position.set(0, 0, 0);\n                child.rotation.set(0, 0, 0);\n                child.scale.set(1, 1, 1);\n            }\n        });\n    };\n\n    this.setHandles = function (handles) {\n\n        this.remove(this.handles);\n        this.handles = handles;\n        if (this.handles !== null) {\n            this.add(this.handles);\n        }\n    };\n\n    this.highlight = function (axis) {\n\n        this.traverse(function (child) {\n\n            if (child.material && child.material.highlight) {\n\n                if (child.name === axis) {\n\n                    child.material.highlight(true);\n                } else {\n\n                    child.material.highlight(false);\n                }\n            }\n        });\n    };\n}\n\nTransformGizmo$1.prototype = Object.create(Object3D.prototype);\nTransformGizmo$1.prototype.constructor = TransformGizmo;\n\nTransformGizmo$1.prototype.update = function (rotation, eye) {\n\n    var vec1 = new Vector3(0, 0, 0);\n    var vec2 = new Vector3(0, 1, 0);\n    var lookAtMatrix = new Matrix4();\n\n    this.traverse(function (child) {\n\n        if (child.name.search(\"E\") !== -1) {\n\n            child.quaternion.setFromRotationMatrix(lookAtMatrix.lookAt(eye, vec1, vec2));\n        } else if (child.name.search(\"X\") !== -1 || child.name.search(\"Y\") !== -1 || child.name.search(\"Z\") !== -1) {\n\n            child.quaternion.setFromEuler(rotation);\n        }\n    });\n};\n\nfunction TransformGizmoTranslate(handles) {\n\n    TransformGizmo$1.call(this, handles);\n\n    this.setActivePlane = function (axis, eye) {\n\n        var tempMatrix = new Matrix4();\n        eye.applyMatrix4(tempMatrix.getInverse(tempMatrix.extractRotation(this.planes[\"XY\"].matrixWorld)));\n\n        if (axis === \"X\") {\n\n            this.activePlane = this.planes[\"XY\"];\n\n            if (Math.abs(eye.y) > Math.abs(eye.z)) this.activePlane = this.planes[\"XZ\"];\n        }\n\n        if (axis === \"Y\") {\n\n            this.activePlane = this.planes[\"XY\"];\n\n            if (Math.abs(eye.x) > Math.abs(eye.z)) this.activePlane = this.planes[\"YZ\"];\n        }\n\n        if (axis === \"Z\") {\n\n            this.activePlane = this.planes[\"XZ\"];\n\n            if (Math.abs(eye.x) > Math.abs(eye.y)) this.activePlane = this.planes[\"YZ\"];\n        }\n\n        if (axis === \"XYZ\") this.activePlane = this.planes[\"XYZE\"];\n\n        if (axis === \"XY\") this.activePlane = this.planes[\"XY\"];\n\n        if (axis === \"YZ\") this.activePlane = this.planes[\"YZ\"];\n\n        if (axis === \"XZ\") this.activePlane = this.planes[\"XZ\"];\n    };\n\n    this.init();\n}\n\nTransformGizmoTranslate.prototype = Object.create(TransformGizmo$1.prototype);\nTransformGizmoTranslate.prototype.constructor = TransformGizmoTranslate;\n\nfunction TransformGizmoRotate(handles) {\n\n    TransformGizmo$1.call(this, handles);\n\n    this.setActivePlane = function (axis) {\n\n        if (axis === \"E\") this.activePlane = this.planes[\"XYZE\"];\n\n        if (axis === \"X\") this.activePlane = this.planes[\"YZ\"];\n\n        if (axis === \"Y\") this.activePlane = this.planes[\"XZ\"];\n\n        if (axis === \"Z\") this.activePlane = this.planes[\"XY\"];\n    };\n\n    this.update = function (rotation, eye2) {\n\n        TransformGizmo$1.prototype.update.apply(this, arguments);\n\n        var group = {\n\n            handles: this[\"handles\"]\n\n        };\n\n        var tempMatrix = new Matrix4();\n        var worldRotation = new Euler(0, 0, 1);\n        var tempQuaternion = new Quaternion();\n        var unitX = new Vector3(1, 0, 0);\n        var unitY = new Vector3(0, 1, 0);\n        var unitZ = new Vector3(0, 0, 1);\n        var quaternionX = new Quaternion();\n        var quaternionY = new Quaternion();\n        var quaternionZ = new Quaternion();\n        var eye = eye2.clone();\n\n        worldRotation.copy(this.planes[\"XY\"].rotation);\n        tempQuaternion.setFromEuler(worldRotation);\n\n        tempMatrix.makeRotationFromQuaternion(tempQuaternion).getInverse(tempMatrix);\n        eye.applyMatrix4(tempMatrix);\n\n        this.traverse(function (child) {\n\n            tempQuaternion.setFromEuler(worldRotation);\n\n            if (child.name === \"X\") {\n\n                quaternionX.setFromAxisAngle(unitX, Math.atan2(-eye.y, eye.z));\n                tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n                child.quaternion.copy(tempQuaternion);\n            }\n\n            if (child.name === \"Y\") {\n\n                quaternionY.setFromAxisAngle(unitY, Math.atan2(eye.x, eye.z));\n                tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionY);\n                child.quaternion.copy(tempQuaternion);\n            }\n\n            if (child.name === \"Z\") {\n\n                quaternionZ.setFromAxisAngle(unitZ, Math.atan2(eye.y, eye.x));\n                tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionZ);\n                child.quaternion.copy(tempQuaternion);\n            }\n        });\n    };\n\n    this.init();\n}\n\nTransformGizmoRotate.prototype = Object.create(TransformGizmo$1.prototype);\nTransformGizmoRotate.prototype.constructor = TransformGizmoRotate;\n\nfunction TransformGizmoScale(handles) {\n\n    TransformGizmo$1.call(this, handles);\n\n    this.setActivePlane = function (axis, eye) {\n\n        var tempMatrix = new Matrix4();\n        eye.applyMatrix4(tempMatrix.getInverse(tempMatrix.extractRotation(this.planes[\"XY\"].matrixWorld)));\n\n        if (axis === \"X\") {\n\n            this.activePlane = this.planes[\"XY\"];\n            if (Math.abs(eye.y) > Math.abs(eye.z)) this.activePlane = this.planes[\"XZ\"];\n        }\n\n        if (axis === \"Y\") {\n\n            this.activePlane = this.planes[\"XY\"];\n            if (Math.abs(eye.x) > Math.abs(eye.z)) this.activePlane = this.planes[\"YZ\"];\n        }\n\n        if (axis === \"Z\") {\n\n            this.activePlane = this.planes[\"XZ\"];\n            if (Math.abs(eye.x) > Math.abs(eye.y)) this.activePlane = this.planes[\"YZ\"];\n        }\n\n        if (axis === \"XYZ\") this.activePlane = this.planes[\"XYZE\"];\n    };\n\n    this.init();\n}\n\nTransformGizmoScale.prototype = Object.create(TransformGizmo$1.prototype);\nTransformGizmoScale.prototype.constructor = TransformGizmoScale;\n\nfunction TransformControls(camera, domElement) {\n\n    // TODO: Make non-uniform scale and rotate play nice in hierarchies\n    // TODO: ADD RXYZ contol\n\n    Object3D.call(this);\n\n    domElement = domElement !== undefined ? domElement : document;\n\n    this.defaultHandles = new DefaultHandles();\n\n    this.object = undefined;\n    this.visible = false;\n    this.translationSnap = null;\n    this.rotationSnap = null;\n    this.space = \"world\";\n    this.size = 1;\n    this.axis = null;\n    this.dragObject = false;\n\n    var scope = this;\n\n    var _mode = \"translate\";\n    var _dragging = false;\n    var _plane = \"XY\";\n    var _gizmo = {\n        \"translate\": new TransformGizmoTranslate(scope.defaultHandles.translateHandles()),\n        \"rotate\": new TransformGizmoRotate(scope.defaultHandles.rotateHandles()),\n        \"scale\": new TransformGizmoScale(scope.defaultHandles.scaleHandles())\n    };\n\n    for (var type in _gizmo) {\n\n        var gizmoObj = _gizmo[type];\n\n        gizmoObj.visible = type === _mode;\n        this.add(gizmoObj);\n    }\n\n    var changeEvent = { type: \"change\" };\n    var mouseDownEvent = { type: \"mouseDown\" };\n    var mouseUpEvent = { type: \"mouseUp\", mode: _mode };\n    var objectChangeEvent = { type: \"objectChange\" };\n\n    var ray = new Raycaster();\n    ray.linePrecision = 0.01;\n    var pointerVector = new Vector2();\n\n    var point = new Vector3();\n    var offset = new Vector3();\n\n    var rotation = new Vector3();\n    var offsetRotation = new Vector3();\n    var scale = 1;\n\n    var lookAtMatrix = new Matrix4();\n    var eye = new Vector3();\n\n    var tempMatrix = new Matrix4();\n    var tempVector = new Vector3();\n    var tempQuaternion = new Quaternion();\n    var unitX = new Vector3(1, 0, 0);\n    var unitY = new Vector3(0, 1, 0);\n    var unitZ = new Vector3(0, 0, 1);\n\n    var quaternionXYZ = new Quaternion();\n    var quaternionX = new Quaternion();\n    var quaternionY = new Quaternion();\n    var quaternionZ = new Quaternion();\n    var quaternionE = new Quaternion();\n\n    var oldPosition = new Vector3();\n    var oldScale = new Vector3();\n    var oldRotationMatrix = new Matrix4();\n\n    var parentRotationMatrix = new Matrix4();\n    var parentScale = new Vector3();\n\n    var worldPosition = new Vector3();\n    var worldRotation = new Euler();\n    var worldRotationMatrix = new Matrix4();\n    var camPosition = new Vector3();\n    var camRotation = new Euler();\n\n    domElement.addEventListener(\"mousedown\", onPointerDown, false);\n    domElement.addEventListener(\"touchstart\", onPointerDown, false);\n\n    domElement.addEventListener(\"mousemove\", onPointerHover, false);\n    domElement.addEventListener(\"touchmove\", onPointerHover, false);\n\n    domElement.addEventListener(\"mousemove\", onPointerMove, false);\n    domElement.addEventListener(\"touchmove\", onPointerMove, false);\n\n    domElement.addEventListener(\"mouseup\", onPointerUp, false);\n    domElement.addEventListener(\"mouseout\", onPointerUp, false);\n    domElement.addEventListener(\"touchend\", onPointerUp, false);\n    domElement.addEventListener(\"touchcancel\", onPointerUp, false);\n    domElement.addEventListener(\"touchleave\", onPointerUp, false);\n\n    this.dispose = function () {\n\n        domElement.removeEventListener(\"mousedown\", onPointerDown);\n        domElement.removeEventListener(\"touchstart\", onPointerDown);\n\n        domElement.removeEventListener(\"mousemove\", onPointerHover);\n        domElement.removeEventListener(\"touchmove\", onPointerHover);\n\n        domElement.removeEventListener(\"mousemove\", onPointerMove);\n        domElement.removeEventListener(\"touchmove\", onPointerMove);\n\n        domElement.removeEventListener(\"mouseup\", onPointerUp);\n        domElement.removeEventListener(\"mouseout\", onPointerUp);\n        domElement.removeEventListener(\"touchend\", onPointerUp);\n        domElement.removeEventListener(\"touchcancel\", onPointerUp);\n        domElement.removeEventListener(\"touchleave\", onPointerUp);\n    };\n\n    this.attach = function (object) {\n\n        this.object = object;\n        this.visible = true;\n        this.update();\n    };\n\n    this.detach = function () {\n\n        this.object = undefined;\n        this.visible = false;\n        this.axis = null;\n    };\n\n    this.getMode = function () {\n\n        return _mode;\n    };\n\n    this.setMode = function (mode) {\n\n        _mode = mode ? mode : _mode;\n\n        if (_mode === \"scale\") scope.space = \"local\";\n\n        for (var type in _gizmo) {\n            _gizmo[type].visible = type === _mode;\n        }this.update();\n        scope.dispatchEvent(changeEvent);\n    };\n\n    this.setTranslationSnap = function (translationSnap) {\n\n        scope.translationSnap = translationSnap;\n    };\n\n    this.setRotationSnap = function (rotationSnap) {\n\n        scope.rotationSnap = rotationSnap;\n    };\n\n    this.setSize = function (size) {\n\n        scope.size = size;\n        this.update();\n        scope.dispatchEvent(changeEvent);\n    };\n\n    this.setSpace = function (space) {\n\n        scope.space = space;\n        this.update();\n        scope.dispatchEvent(changeEvent);\n    };\n\n    this.setHandles = function (mode, handles) {\n\n        _gizmo[mode].setHandles(handles);\n        scope.update();\n        scope.dispatchEvent(changeEvent);\n    };\n\n    this.update = function () {\n\n        if (scope.object === undefined) return;\n\n        scope.object.updateMatrixWorld();\n        worldPosition.setFromMatrixPosition(scope.object.matrixWorld);\n        worldRotation.setFromRotationMatrix(tempMatrix.extractRotation(scope.object.matrixWorld));\n\n        camera.updateMatrixWorld();\n        camPosition.setFromMatrixPosition(camera.matrixWorld);\n        camRotation.setFromRotationMatrix(tempMatrix.extractRotation(camera.matrixWorld));\n\n        scale = worldPosition.distanceTo(camPosition) / 6 * scope.size;\n        this.position.copy(worldPosition);\n        this.scale.set(scale, scale, scale);\n\n        if (camera instanceof PerspectiveCamera) {\n\n            eye.copy(camPosition).sub(worldPosition).normalize();\n        } else if (camera instanceof OrthographicCamera) {\n\n            eye.copy(camPosition).normalize();\n        }\n\n        if (scope.space === \"local\") {\n\n            _gizmo[_mode].update(worldRotation, eye);\n        } else if (scope.space === \"world\") {\n\n            _gizmo[_mode].update(new Euler(), eye);\n        }\n\n        _gizmo[_mode].highlight(scope.axis);\n    };\n\n    function onPointerHover(event) {\n\n        if (scope.object === undefined || _dragging === true || _gizmo[_mode].handles === null || event.button !== undefined && event.button !== 0) return;\n\n        var pointer = event.changedTouches ? event.changedTouches[0] : event;\n\n        var intersect = intersectObjects(pointer, _gizmo[_mode].handles.children);\n\n        var axis = null;\n\n        if (intersect) {\n\n            axis = intersect.object.name;\n\n            event.preventDefault();\n        }\n\n        if (scope.axis !== axis) {\n\n            scope.axis = axis;\n            scope.update();\n            scope.dispatchEvent(changeEvent);\n        }\n    }\n\n    function onPointerDown(event) {\n\n        if (scope.object === undefined || _dragging === true || event.button !== undefined && event.button !== 0) return;\n\n        var pointer = event.changedTouches ? event.changedTouches[0] : event;\n\n        if (pointer.button === 0 || pointer.button === undefined) {\n\n            if (_gizmo[_mode].handles !== null) {\n\n                var intersect = intersectObjects(pointer, _gizmo[_mode].handles.children);\n\n                if (!intersect) return;\n\n                event.preventDefault();\n                event.stopPropagation();\n\n                scope.dispatchEvent(mouseDownEvent);\n\n                scope.axis = intersect.object.name;\n            }\n\n            if (!scope.axis) return;\n\n            scope.update();\n\n            eye.copy(camPosition).sub(worldPosition).normalize();\n\n            _gizmo[_mode].setActivePlane(scope.axis, eye);\n\n            var planeIntersect = intersectObjects(pointer, [_gizmo[_mode].activePlane]);\n\n            if (planeIntersect) {\n\n                oldPosition.copy(scope.object.position);\n                oldScale.copy(scope.object.scale);\n\n                oldRotationMatrix.extractRotation(scope.object.matrix);\n                worldRotationMatrix.extractRotation(scope.object.matrixWorld);\n\n                parentRotationMatrix.extractRotation(scope.object.parent.matrixWorld);\n                parentScale.setFromMatrixScale(tempMatrix.getInverse(scope.object.parent.matrixWorld));\n\n                offset.copy(planeIntersect.point);\n            }\n        }\n\n        _dragging = true;\n    }\n\n    function onPointerMove(event) {\n\n        if (scope.object === undefined || scope.axis === null || _dragging === false || event.button !== undefined && event.button !== 0) return;\n\n        var pointer = event.changedTouches ? event.changedTouches[0] : event;\n\n        var planeIntersect = intersectObjects(pointer, [_gizmo[_mode].activePlane]);\n\n        if (planeIntersect === false) return;\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        point.copy(planeIntersect.point);\n\n        if (_mode === \"translate\") {\n\n            point.sub(offset);\n            point.multiply(parentScale);\n\n            if (scope.space === \"local\") {\n\n                point.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));\n\n                if (scope.axis.search(\"X\") === -1) point.x = 0;\n                if (scope.axis.search(\"Y\") === -1) point.y = 0;\n                if (scope.axis.search(\"Z\") === -1) point.z = 0;\n\n                point.applyMatrix4(oldRotationMatrix);\n\n                scope.object.position.copy(oldPosition);\n                scope.object.position.add(point);\n            }\n\n            if (scope.space === \"world\" || scope.axis.search(\"XYZ\") !== -1) {\n\n                if (scope.axis.search(\"X\") === -1) point.x = 0;\n                if (scope.axis.search(\"Y\") === -1) point.y = 0;\n                if (scope.axis.search(\"Z\") === -1) point.z = 0;\n\n                point.applyMatrix4(tempMatrix.getInverse(parentRotationMatrix));\n\n                scope.object.position.copy(oldPosition);\n                scope.object.position.add(point);\n            }\n\n            if (scope.translationSnap !== null) {\n\n                if (scope.space === \"local\") {\n\n                    scope.object.position.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));\n                }\n\n                if (scope.axis.search(\"X\") !== -1) scope.object.position.x = Math.round(scope.object.position.x / scope.translationSnap) * scope.translationSnap;\n                if (scope.axis.search(\"Y\") !== -1) scope.object.position.y = Math.round(scope.object.position.y / scope.translationSnap) * scope.translationSnap;\n                if (scope.axis.search(\"Z\") !== -1) scope.object.position.z = Math.round(scope.object.position.z / scope.translationSnap) * scope.translationSnap;\n\n                if (scope.space === \"local\") {\n\n                    scope.object.position.applyMatrix4(worldRotationMatrix);\n                }\n            }\n        } else if (_mode === \"scale\") {\n\n            point.sub(offset);\n            point.multiply(parentScale);\n\n            if (scope.space === \"local\") {\n\n                if (scope.axis === \"XYZ\") {\n\n                    scale = 1 + point.y / Math.max(oldScale.x, oldScale.y, oldScale.z);\n\n                    scope.object.scale.x = oldScale.x * scale;\n                    scope.object.scale.y = oldScale.y * scale;\n                    scope.object.scale.z = oldScale.z * scale;\n                } else {\n\n                    point.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));\n\n                    if (scope.axis === \"X\") scope.object.scale.x = oldScale.x * (1 + point.x / oldScale.x);\n                    if (scope.axis === \"Y\") scope.object.scale.y = oldScale.y * (1 + point.y / oldScale.y);\n                    if (scope.axis === \"Z\") scope.object.scale.z = oldScale.z * (1 + point.z / oldScale.z);\n                }\n            }\n        } else if (_mode === \"rotate\") {\n\n            point.sub(worldPosition);\n            point.multiply(parentScale);\n            tempVector.copy(offset).sub(worldPosition);\n            tempVector.multiply(parentScale);\n\n            if (scope.axis === \"E\") {\n\n                point.applyMatrix4(tempMatrix.getInverse(lookAtMatrix));\n                tempVector.applyMatrix4(tempMatrix.getInverse(lookAtMatrix));\n\n                rotation.set(Math.atan2(point.z, point.y), Math.atan2(point.x, point.z), Math.atan2(point.y, point.x));\n                offsetRotation.set(Math.atan2(tempVector.z, tempVector.y), Math.atan2(tempVector.x, tempVector.z), Math.atan2(tempVector.y, tempVector.x));\n\n                tempQuaternion.setFromRotationMatrix(tempMatrix.getInverse(parentRotationMatrix));\n\n                quaternionE.setFromAxisAngle(eye, rotation.z - offsetRotation.z);\n                quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);\n\n                tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionE);\n                tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionXYZ);\n\n                scope.object.quaternion.copy(tempQuaternion);\n            } else if (scope.axis === \"XYZE\") {\n\n                quaternionE.setFromEuler(point.clone().cross(tempVector).normalize()); // rotation axis\n\n                tempQuaternion.setFromRotationMatrix(tempMatrix.getInverse(parentRotationMatrix));\n                quaternionX.setFromAxisAngle(quaternionE, -point.clone().angleTo(tempVector));\n                quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);\n\n                tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n                tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionXYZ);\n\n                scope.object.quaternion.copy(tempQuaternion);\n            } else if (scope.space === \"local\") {\n\n                point.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));\n\n                tempVector.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));\n\n                rotation.set(Math.atan2(point.z, point.y), Math.atan2(point.x, point.z), Math.atan2(point.y, point.x));\n                offsetRotation.set(Math.atan2(tempVector.z, tempVector.y), Math.atan2(tempVector.x, tempVector.z), Math.atan2(tempVector.y, tempVector.x));\n\n                quaternionXYZ.setFromRotationMatrix(oldRotationMatrix);\n\n                if (scope.rotationSnap !== null) {\n\n                    quaternionX.setFromAxisAngle(unitX, Math.round((rotation.x - offsetRotation.x) / scope.rotationSnap) * scope.rotationSnap);\n                    quaternionY.setFromAxisAngle(unitY, Math.round((rotation.y - offsetRotation.y) / scope.rotationSnap) * scope.rotationSnap);\n                    quaternionZ.setFromAxisAngle(unitZ, Math.round((rotation.z - offsetRotation.z) / scope.rotationSnap) * scope.rotationSnap);\n                } else {\n\n                    quaternionX.setFromAxisAngle(unitX, rotation.x - offsetRotation.x);\n                    quaternionY.setFromAxisAngle(unitY, rotation.y - offsetRotation.y);\n                    quaternionZ.setFromAxisAngle(unitZ, rotation.z - offsetRotation.z);\n                }\n\n                if (scope.axis === \"X\") quaternionXYZ.multiplyQuaternions(quaternionXYZ, quaternionX);\n                if (scope.axis === \"Y\") quaternionXYZ.multiplyQuaternions(quaternionXYZ, quaternionY);\n                if (scope.axis === \"Z\") quaternionXYZ.multiplyQuaternions(quaternionXYZ, quaternionZ);\n\n                scope.object.quaternion.copy(quaternionXYZ);\n            } else if (scope.space === \"world\") {\n\n                rotation.set(Math.atan2(point.z, point.y), Math.atan2(point.x, point.z), Math.atan2(point.y, point.x));\n                offsetRotation.set(Math.atan2(tempVector.z, tempVector.y), Math.atan2(tempVector.x, tempVector.z), Math.atan2(tempVector.y, tempVector.x));\n\n                tempQuaternion.setFromRotationMatrix(tempMatrix.getInverse(parentRotationMatrix));\n\n                if (scope.rotationSnap !== null) {\n\n                    quaternionX.setFromAxisAngle(unitX, Math.round((rotation.x - offsetRotation.x) / scope.rotationSnap) * scope.rotationSnap);\n                    quaternionY.setFromAxisAngle(unitY, Math.round((rotation.y - offsetRotation.y) / scope.rotationSnap) * scope.rotationSnap);\n                    quaternionZ.setFromAxisAngle(unitZ, Math.round((rotation.z - offsetRotation.z) / scope.rotationSnap) * scope.rotationSnap);\n                } else {\n\n                    quaternionX.setFromAxisAngle(unitX, rotation.x - offsetRotation.x);\n                    quaternionY.setFromAxisAngle(unitY, rotation.y - offsetRotation.y);\n                    quaternionZ.setFromAxisAngle(unitZ, rotation.z - offsetRotation.z);\n                }\n\n                quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);\n\n                if (scope.axis === \"X\") tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n                if (scope.axis === \"Y\") tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionY);\n                if (scope.axis === \"Z\") tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionZ);\n\n                tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionXYZ);\n\n                scope.object.quaternion.copy(tempQuaternion);\n            }\n        }\n\n        scope.update();\n        scope.dispatchEvent(changeEvent);\n        scope.dispatchEvent(objectChangeEvent);\n    }\n\n    function onPointerUp(event) {\n\n        event.preventDefault(); // Prevent MouseEvent on mobile\n\n        if (event.button !== undefined && event.button !== 0) return;\n\n        if (_dragging && scope.axis !== null) {\n\n            mouseUpEvent.mode = _mode;\n            scope.dispatchEvent(mouseUpEvent);\n        }\n\n        _dragging = false;\n\n        if ('TouchEvent' in window && event instanceof TouchEvent) {\n\n            // Force \"rollover\"\n\n            scope.axis = null;\n            scope.update();\n            scope.dispatchEvent(changeEvent);\n        } else {\n\n            onPointerHover(event);\n        }\n    }\n\n    function intersectObjects(pointer, objects) {\n\n        var rect = domElement.getBoundingClientRect();\n        var x = (pointer.clientX - rect.left) / rect.width;\n        var y = (pointer.clientY - rect.top) / rect.height;\n\n        pointerVector.set(x * 2 - 1, -(y * 2) + 1);\n        ray.setFromCamera(pointerVector, camera);\n\n        var intersections = ray.intersectObjects(objects, true);\n        return intersections[0] ? intersections[0] : false;\n    }\n}\n\nTransformControls.prototype = Object.create(Object3D.prototype);\nTransformControls.prototype.constructor = TransformControls;\n\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finger swipe\n\nfunction OrbitControls$1(object, domElement) {\n\n\tthis.object = object;\n\n\tthis.domElement = domElement !== undefined ? domElement : document;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = -Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.25;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.keyPanSpeed = 7.0; // pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { ORBIT: MOUSE.LEFT, ZOOM: MOUSE.MIDDLE, PAN: MOUSE.RIGHT };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy(scope.target);\n\t\tscope.position0.copy(scope.object.position);\n\t\tscope.zoom0 = scope.object.zoom;\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy(scope.target0);\n\t\tscope.object.position.copy(scope.position0);\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent(changeEvent);\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0));\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new Vector3();\n\t\tvar lastQuaternion = new Quaternion();\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy(position).sub(scope.target);\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion(quat);\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3(offset);\n\n\t\t\tif (scope.autoRotate && state === STATE.NONE) {\n\n\t\t\t\trotateLeft(getAutoRotationAngle());\n\t\t\t}\n\n\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, spherical.theta));\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\n\n\t\t\tspherical.makeSafe();\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));\n\n\t\t\t// move target to panned location\n\t\t\tscope.target.add(panOffset);\n\n\t\t\toffset.setFromSpherical(spherical);\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion(quatInverse);\n\n\t\t\tposition.copy(scope.target).add(offset);\n\n\t\t\tscope.object.lookAt(scope.target);\n\n\t\t\tif (scope.enableDamping === true) {\n\n\t\t\t\tsphericalDelta.theta *= 1 - scope.dampingFactor;\n\t\t\t\tsphericalDelta.phi *= 1 - scope.dampingFactor;\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set(0, 0, 0);\n\t\t\t}\n\n\t\t\tscale = 1;\n\t\t\tpanOffset.set(0, 0, 0);\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n\n\t\t\t\tscope.dispatchEvent(changeEvent);\n\n\t\t\t\tlastPosition.copy(scope.object.position);\n\t\t\t\tlastQuaternion.copy(scope.object.quaternion);\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener('contextmenu', onContextMenu, false);\n\t\tscope.domElement.removeEventListener('mousedown', onMouseDown, false);\n\t\tscope.domElement.removeEventListener('wheel', onMouseWheel, false);\n\n\t\tscope.domElement.removeEventListener('touchstart', onTouchStart, false);\n\t\tscope.domElement.removeEventListener('touchend', onTouchEnd, false);\n\t\tscope.domElement.removeEventListener('touchmove', onTouchMove, false);\n\n\t\tdocument.removeEventListener('mousemove', onMouseMove, false);\n\t\tdocument.removeEventListener('mouseup', onMouseUp, false);\n\n\t\twindow.removeEventListener('keydown', onKeyDown, false);\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY: 4, TOUCH_PAN: 5 };\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new Spherical();\n\tvar sphericalDelta = new Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new Vector2();\n\tvar rotateEnd = new Vector2();\n\tvar rotateDelta = new Vector2();\n\n\tvar panStart = new Vector2();\n\tvar panEnd = new Vector2();\n\tvar panDelta = new Vector2();\n\n\tvar dollyStart = new Vector2();\n\tvar dollyEnd = new Vector2();\n\tvar dollyDelta = new Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow(0.95, scope.zoomSpeed);\n\t}\n\n\tfunction rotateLeft(angle) {\n\n\t\tsphericalDelta.theta -= angle;\n\t}\n\n\tfunction rotateUp(angle) {\n\n\t\tsphericalDelta.phi -= angle;\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panLeft(distance, objectMatrix) {\n\n\t\t\tv.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n\t\t\tv.multiplyScalar(-distance);\n\n\t\t\tpanOffset.add(v);\n\t\t};\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panUp(distance, objectMatrix) {\n\n\t\t\tv.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\n\t\t\tv.multiplyScalar(distance);\n\n\t\t\tpanOffset.add(v);\n\t\t};\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\treturn function pan(deltaX, deltaY) {\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\tif (scope.object instanceof PerspectiveCamera) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy(position).sub(scope.target);\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0);\n\n\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\tpanLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);\n\t\t\t\tpanUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);\n\t\t\t} else if (scope.object instanceof OrthographicCamera) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);\n\t\t\t\tpanUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n\t\t\t\tscope.enablePan = false;\n\t\t\t}\n\t\t};\n\t}();\n\n\tfunction dollyIn(dollyScale) {\n\n\t\tif (scope.object instanceof PerspectiveCamera) {\n\n\t\t\tscale /= dollyScale;\n\t\t} else if (scope.object instanceof OrthographicCamera) {\n\n\t\t\tscope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\t\t} else {\n\n\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n\t\t\tscope.enableZoom = false;\n\t\t}\n\t}\n\n\tfunction dollyOut(dollyScale) {\n\n\t\tif (scope.object instanceof PerspectiveCamera) {\n\n\t\t\tscale *= dollyScale;\n\t\t} else if (scope.object instanceof OrthographicCamera) {\n\n\t\t\tscope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\t\t} else {\n\n\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n\t\t\tscope.enableZoom = false;\n\t\t}\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate(event) {\n\n\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\trotateStart.set(event.clientX, event.clientY);\n\t}\n\n\tfunction handleMouseDownDolly(event) {\n\n\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\tdollyStart.set(event.clientX, event.clientY);\n\t}\n\n\tfunction handleMouseDownPan(event) {\n\n\t\t//console.log( 'handleMouseDownPan' );\n\n\t\tpanStart.set(event.clientX, event.clientY);\n\t}\n\n\tfunction handleMouseMoveRotate(event) {\n\n\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\trotateEnd.set(event.clientX, event.clientY);\n\t\trotateDelta.subVectors(rotateEnd, rotateStart);\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n\n\t\trotateStart.copy(rotateEnd);\n\n\t\tscope.update();\n\t}\n\n\tfunction handleMouseMoveDolly(event) {\n\n\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\tdollyEnd.set(event.clientX, event.clientY);\n\n\t\tdollyDelta.subVectors(dollyEnd, dollyStart);\n\n\t\tif (dollyDelta.y > 0) {\n\n\t\t\tdollyIn(getZoomScale());\n\t\t} else if (dollyDelta.y < 0) {\n\n\t\t\tdollyOut(getZoomScale());\n\t\t}\n\n\t\tdollyStart.copy(dollyEnd);\n\n\t\tscope.update();\n\t}\n\n\tfunction handleMouseMovePan(event) {\n\n\t\t//console.log( 'handleMouseMovePan' );\n\n\t\tpanEnd.set(event.clientX, event.clientY);\n\n\t\tpanDelta.subVectors(panEnd, panStart);\n\n\t\tpan(panDelta.x, panDelta.y);\n\n\t\tpanStart.copy(panEnd);\n\n\t\tscope.update();\n\t}\n\n\tfunction handleMouseUp(event) {\n\n\t\t// console.log( 'handleMouseUp' );\n\n\t}\n\n\tfunction handleMouseWheel(event) {\n\n\t\t// console.log( 'handleMouseWheel' );\n\n\t\tif (event.deltaY < 0) {\n\n\t\t\tdollyOut(getZoomScale());\n\t\t} else if (event.deltaY > 0) {\n\n\t\t\tdollyIn(getZoomScale());\n\t\t}\n\n\t\tscope.update();\n\t}\n\n\tfunction handleKeyDown(event) {\n\n\t\t//console.log( 'handleKeyDown' );\n\n\t\tswitch (event.keyCode) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan(0, scope.keyPanSpeed);\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan(0, -scope.keyPanSpeed);\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan(scope.keyPanSpeed, 0);\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan(-scope.keyPanSpeed, 0);\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t}\n\t}\n\n\tfunction handleTouchStartRotate(event) {\n\n\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\trotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n\t}\n\n\tfunction handleTouchStartDolly(event) {\n\n\t\t//console.log( 'handleTouchStartDolly' );\n\n\t\tvar dx = event.touches[0].pageX - event.touches[1].pageX;\n\t\tvar dy = event.touches[0].pageY - event.touches[1].pageY;\n\n\t\tvar distance = Math.sqrt(dx * dx + dy * dy);\n\n\t\tdollyStart.set(0, distance);\n\t}\n\n\tfunction handleTouchStartPan(event) {\n\n\t\t//console.log( 'handleTouchStartPan' );\n\n\t\tpanStart.set(event.touches[0].pageX, event.touches[0].pageY);\n\t}\n\n\tfunction handleTouchMoveRotate(event) {\n\n\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\trotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n\t\trotateDelta.subVectors(rotateEnd, rotateStart);\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t// rotating across whole screen goes 360 degrees around\n\t\trotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);\n\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\trotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n\n\t\trotateStart.copy(rotateEnd);\n\n\t\tscope.update();\n\t}\n\n\tfunction handleTouchMoveDolly(event) {\n\n\t\t//console.log( 'handleTouchMoveDolly' );\n\n\t\tvar dx = event.touches[0].pageX - event.touches[1].pageX;\n\t\tvar dy = event.touches[0].pageY - event.touches[1].pageY;\n\n\t\tvar distance = Math.sqrt(dx * dx + dy * dy);\n\n\t\tdollyEnd.set(0, distance);\n\n\t\tdollyDelta.subVectors(dollyEnd, dollyStart);\n\n\t\tif (dollyDelta.y > 0) {\n\n\t\t\tdollyOut(getZoomScale());\n\t\t} else if (dollyDelta.y < 0) {\n\n\t\t\tdollyIn(getZoomScale());\n\t\t}\n\n\t\tdollyStart.copy(dollyEnd);\n\n\t\tscope.update();\n\t}\n\n\tfunction handleTouchMovePan(event) {\n\n\t\t//console.log( 'handleTouchMovePan' );\n\n\t\tpanEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n\n\t\tpanDelta.subVectors(panEnd, panStart);\n\n\t\tpan(panDelta.x, panDelta.y);\n\n\t\tpanStart.copy(panEnd);\n\n\t\tscope.update();\n\t}\n\n\tfunction handleTouchEnd(event) {}\n\n\t//console.log( 'handleTouchEnd' );\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown(event) {\n\n\t\tif (scope.enabled === false) return;\n\n\t\tevent.preventDefault();\n\n\t\tif (event.button === scope.mouseButtons.ORBIT) {\n\n\t\t\tif (scope.enableRotate === false) return;\n\n\t\t\thandleMouseDownRotate(event);\n\n\t\t\tstate = STATE.ROTATE;\n\t\t} else if (event.button === scope.mouseButtons.ZOOM) {\n\n\t\t\tif (scope.enableZoom === false) return;\n\n\t\t\thandleMouseDownDolly(event);\n\n\t\t\tstate = STATE.DOLLY;\n\t\t} else if (event.button === scope.mouseButtons.PAN) {\n\n\t\t\tif (scope.enablePan === false) return;\n\n\t\t\thandleMouseDownPan(event);\n\n\t\t\tstate = STATE.PAN;\n\t\t}\n\n\t\tif (state !== STATE.NONE) {\n\n\t\t\tdocument.addEventListener('mousemove', onMouseMove, false);\n\t\t\tdocument.addEventListener('mouseup', onMouseUp, false);\n\n\t\t\tscope.dispatchEvent(startEvent);\n\t\t}\n\t}\n\n\tfunction onMouseMove(event) {\n\n\t\tif (scope.enabled === false) return;\n\n\t\tevent.preventDefault();\n\n\t\tif (state === STATE.ROTATE) {\n\n\t\t\tif (scope.enableRotate === false) return;\n\n\t\t\thandleMouseMoveRotate(event);\n\t\t} else if (state === STATE.DOLLY) {\n\n\t\t\tif (scope.enableZoom === false) return;\n\n\t\t\thandleMouseMoveDolly(event);\n\t\t} else if (state === STATE.PAN) {\n\n\t\t\tif (scope.enablePan === false) return;\n\n\t\t\thandleMouseMovePan(event);\n\t\t}\n\t}\n\n\tfunction onMouseUp(event) {\n\n\t\tif (scope.enabled === false) return;\n\n\t\thandleMouseUp(event);\n\n\t\tdocument.removeEventListener('mousemove', onMouseMove, false);\n\t\tdocument.removeEventListener('mouseup', onMouseUp, false);\n\n\t\tscope.dispatchEvent(endEvent);\n\n\t\tstate = STATE.NONE;\n\t}\n\n\tfunction onMouseWheel(event) {\n\n\t\tif (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\thandleMouseWheel(event);\n\n\t\tscope.dispatchEvent(startEvent); // not sure why these are here...\n\t\tscope.dispatchEvent(endEvent);\n\t}\n\n\tfunction onKeyDown(event) {\n\n\t\tif (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false) return;\n\n\t\thandleKeyDown(event);\n\t}\n\n\tfunction onTouchStart(event) {\n\n\t\tif (scope.enabled === false) return;\n\n\t\tswitch (event.touches.length) {\n\n\t\t\tcase 1:\n\t\t\t\t// one-fingered touch: rotate\n\n\t\t\t\tif (scope.enableRotate === false) return;\n\n\t\t\t\thandleTouchStartRotate(event);\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t// two-fingered touch: dolly\n\n\t\t\t\tif (scope.enableZoom === false) return;\n\n\t\t\t\thandleTouchStartDolly(event);\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\t// three-fingered touch: pan\n\n\t\t\t\tif (scope.enablePan === false) return;\n\n\t\t\t\thandleTouchStartPan(event);\n\n\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif (state !== STATE.NONE) {\n\n\t\t\tscope.dispatchEvent(startEvent);\n\t\t}\n\t}\n\n\tfunction onTouchMove(event) {\n\n\t\tif (scope.enabled === false) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tswitch (event.touches.length) {\n\n\t\t\tcase 1:\n\t\t\t\t// one-fingered touch: rotate\n\n\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\tif (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\n\n\t\t\t\thandleTouchMoveRotate(event);\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t// two-fingered touch: dolly\n\n\t\t\t\tif (scope.enableZoom === false) return;\n\t\t\t\tif (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\n\n\t\t\t\thandleTouchMoveDolly(event);\n\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\t// three-fingered touch: pan\n\n\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\tif (state !== STATE.TOUCH_PAN) return; // is this needed?...\n\n\t\t\t\thandleTouchMovePan(event);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\t}\n\n\tfunction onTouchEnd(event) {\n\n\t\tif (scope.enabled === false) return;\n\n\t\thandleTouchEnd(event);\n\n\t\tscope.dispatchEvent(endEvent);\n\n\t\tstate = STATE.NONE;\n\t}\n\n\tfunction onContextMenu(event) {\n\n\t\tevent.preventDefault();\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener('contextmenu', onContextMenu, false);\n\n\tscope.domElement.addEventListener('mousedown', onMouseDown, false);\n\tscope.domElement.addEventListener('wheel', onMouseWheel, false);\n\n\tscope.domElement.addEventListener('touchstart', onTouchStart, false);\n\tscope.domElement.addEventListener('touchend', onTouchEnd, false);\n\tscope.domElement.addEventListener('touchmove', onTouchMove, false);\n\n\twindow.addEventListener('keydown', onKeyDown, false);\n\n\t// force an update at start\n\n\tthis.update();\n}\n\nOrbitControls$1.prototype = Object.create(EventDispatcher.prototype);\nOrbitControls$1.prototype.constructor = OrbitControls;\n\nObject.defineProperties(OrbitControls$1.prototype, {\n\n\tcenter: {\n\n\t\tget: function get() {\n\n\t\t\tconsole.warn('THREE.OrbitControls: .center has been renamed to .target');\n\t\t\treturn this.target;\n\t\t}\n\n\t},\n\n\t// backward compatibility\n\n\tnoZoom: {\n\n\t\tget: function get() {\n\n\t\t\tconsole.warn('THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');\n\t\t\treturn !this.enableZoom;\n\t\t},\n\n\t\tset: function set(value) {\n\n\t\t\tconsole.warn('THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');\n\t\t\tthis.enableZoom = !value;\n\t\t}\n\n\t},\n\n\tnoRotate: {\n\n\t\tget: function get() {\n\n\t\t\tconsole.warn('THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');\n\t\t\treturn !this.enableRotate;\n\t\t},\n\n\t\tset: function set(value) {\n\n\t\t\tconsole.warn('THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');\n\t\t\tthis.enableRotate = !value;\n\t\t}\n\n\t},\n\n\tnoPan: {\n\n\t\tget: function get() {\n\n\t\t\tconsole.warn('THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.');\n\t\t\treturn !this.enablePan;\n\t\t},\n\n\t\tset: function set(value) {\n\n\t\t\tconsole.warn('THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.');\n\t\t\tthis.enablePan = !value;\n\t\t}\n\n\t},\n\n\tnoKeys: {\n\n\t\tget: function get() {\n\n\t\t\tconsole.warn('THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');\n\t\t\treturn !this.enableKeys;\n\t\t},\n\n\t\tset: function set(value) {\n\n\t\t\tconsole.warn('THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');\n\t\t\tthis.enableKeys = !value;\n\t\t}\n\n\t},\n\n\tstaticMoving: {\n\n\t\tget: function get() {\n\n\t\t\tconsole.warn('THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');\n\t\t\treturn !this.enableDamping;\n\t\t},\n\n\t\tset: function set(value) {\n\n\t\t\tconsole.warn('THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');\n\t\t\tthis.enableDamping = !value;\n\t\t}\n\n\t},\n\n\tdynamicDampingFactor: {\n\n\t\tget: function get() {\n\n\t\t\tconsole.warn('THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');\n\t\t\treturn this.dampingFactor;\n\t\t},\n\n\t\tset: function set(value) {\n\n\t\t\tconsole.warn('THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');\n\t\t\tthis.dampingFactor = value;\n\t\t}\n\n\t}\n\n});\n\n/**\n * @author aleeper / http://adamleeper.com/\n * @author mrdoob / http://mrdoob.com/\n * @author gero3 / https://github.com/gero3\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\n *\n * Supports both binary and ASCII encoded files, with automatic detection of type.\n *\n * The loader returns a non-indexed buffer geometry.\n *\n * Limitations:\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\n *  ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *  var loader = new THREE.STLLoader();\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\n *    scene.add( new THREE.Mesh( geometry ) );\n *  });\n *\n * For binary STLs geometry might contain colors for vertices. To use it:\n *  // use the same code to load STL as above\n *  if (geometry.hasColors) {\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: THREE.VertexColors });\n *  } else { .... }\n *  var mesh = new THREE.Mesh( geometry, material );\n */\n\nfunction STLLoader(manager) {\n\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n}\n\nSTLLoader.prototype = {\n\n    constructor: STLLoader,\n\n    load: function load(url, onLoad, onProgress, onError) {\n\n        var scope = this;\n\n        var loader = new FileLoader(scope.manager);\n        loader.setResponseType('arraybuffer');\n        loader.load(url, function (text) {\n\n            onLoad(scope.parse(text));\n        }, onProgress, onError);\n    },\n\n    parse: function parse(data) {\n\n        var isBinary = function isBinary() {\n\n            var expect, face_size, n_faces, reader;\n            reader = new DataView(binData);\n            face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n            n_faces = reader.getUint32(80, true);\n            expect = 80 + 32 / 8 + n_faces * face_size;\n\n            if (expect === reader.byteLength) {\n\n                return true;\n            }\n\n            // An ASCII STL data must begin with 'solid ' as the first six bytes.\n            // However, ASCII STLs lacking the SPACE after the 'd' are known to be\n            // plentiful.  So, check the first 5 bytes for 'solid'.\n\n            // US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n            var solid = [115, 111, 108, 105, 100];\n\n            for (var i = 0; i < 5; i++) {\n\n                // If solid[ i ] does not match the i-th byte, then it is not an\n                // ASCII STL; hence, it is binary and return true.\n\n                if (solid[i] != reader.getUint8(i, false)) return true;\n            }\n\n            // First 5 bytes read \"solid\"; declare it to be an ASCII STL\n            return false;\n        };\n\n        var binData = this.ensureBinary(data);\n\n        return isBinary() ? this.parseBinary(binData) : this.parseASCII(this.ensureString(data));\n    },\n\n    parseBinary: function parseBinary(data) {\n\n        var reader = new DataView(data);\n        var faces = reader.getUint32(80, true);\n\n        var r,\n            g,\n            b,\n            hasColors = false,\n            colors;\n        var defaultR, defaultG, defaultB, alpha;\n\n        // process STL header\n        // check for default color in header (\"COLOR=rgba\" sequence).\n\n        for (var index = 0; index < 80 - 10; index++) {\n\n            if (reader.getUint32(index, false) == 0x434F4C4F /*COLO*/ && reader.getUint8(index + 4) == 0x52 /*'R'*/ && reader.getUint8(index + 5) == 0x3D /*'='*/) {\n\n                hasColors = true;\n                colors = [];\n\n                defaultR = reader.getUint8(index + 6) / 255;\n                defaultG = reader.getUint8(index + 7) / 255;\n                defaultB = reader.getUint8(index + 8) / 255;\n                alpha = reader.getUint8(index + 9) / 255;\n            }\n        }\n\n        var dataOffset = 84;\n        var faceLength = 12 * 4 + 2;\n\n        var geometry = new BufferGeometry();\n\n        var vertices = [];\n        var normals = [];\n\n        for (var face = 0; face < faces; face++) {\n\n            var start = dataOffset + face * faceLength;\n            var normalX = reader.getFloat32(start, true);\n            var normalY = reader.getFloat32(start + 4, true);\n            var normalZ = reader.getFloat32(start + 8, true);\n\n            if (hasColors) {\n\n                var packedColor = reader.getUint16(start + 48, true);\n\n                if ((packedColor & 0x8000) === 0) {\n\n                    // facet has its own unique color\n\n                    r = (packedColor & 0x1F) / 31;\n                    g = (packedColor >> 5 & 0x1F) / 31;\n                    b = (packedColor >> 10 & 0x1F) / 31;\n                } else {\n\n                    r = defaultR;\n                    g = defaultG;\n                    b = defaultB;\n                }\n            }\n\n            for (var i = 1; i <= 3; i++) {\n\n                var vertexstart = start + i * 12;\n\n                vertices.push(reader.getFloat32(vertexstart, true));\n                vertices.push(reader.getFloat32(vertexstart + 4, true));\n                vertices.push(reader.getFloat32(vertexstart + 8, true));\n\n                normals.push(normalX, normalY, normalZ);\n\n                if (hasColors) {\n\n                    colors.push(r, g, b);\n                }\n            }\n        }\n\n        geometry.addAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n        geometry.addAttribute('normal', new BufferAttribute(new Float32Array(normals), 3));\n\n        if (hasColors) {\n\n            geometry.addAttribute('color', new BufferAttribute(new Float32Array(colors), 3));\n            geometry.hasColors = true;\n            geometry.alpha = alpha;\n        }\n\n        return geometry;\n    },\n\n    parseASCII: function parseASCII(data) {\n\n        var geometry, length, patternFace, patternNormal, patternVertex, result, text;\n        geometry = new BufferGeometry();\n        patternFace = /facet([\\s\\S]*?)endfacet/g;\n\n        var vertices = [];\n        var normals = [];\n\n        var normal = new Vector3();\n\n        while ((result = patternFace.exec(data)) !== null) {\n\n            text = result[0];\n            patternNormal = /normal[\\s]+([\\-+]?[0-9]+\\.?[0-9]*([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+/g;\n\n            while ((result = patternNormal.exec(text)) !== null) {\n\n                normal.x = parseFloat(result[1]);\n                normal.y = parseFloat(result[3]);\n                normal.z = parseFloat(result[5]);\n            }\n\n            patternVertex = /vertex[\\s]+([\\-+]?[0-9]+\\.?[0-9]*([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+/g;\n\n            while ((result = patternVertex.exec(text)) !== null) {\n\n                vertices.push(parseFloat(result[1]), parseFloat(result[3]), parseFloat(result[5]));\n                normals.push(normal.x, normal.y, normal.z);\n            }\n        }\n\n        geometry.addAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n        geometry.addAttribute('normal', new BufferAttribute(new Float32Array(normals), 3));\n\n        return geometry;\n    },\n\n    ensureString: function ensureString(buf) {\n\n        if (typeof buf !== \"string\") {\n\n            var array_buffer = new Uint8Array(buf);\n            var strArray = [];\n            for (var i = 0; i < buf.byteLength; i++) {\n\n                strArray.push(String.fromCharCode(array_buffer[i])); // implicitly assumes little-endian\n            }\n            return strArray.join('');\n        } else {\n\n            return buf;\n        }\n    },\n\n    ensureBinary: function ensureBinary(buf) {\n\n        if (typeof buf === \"string\") {\n\n            var array_buffer = new Uint8Array(buf.length);\n            for (var i = 0; i < buf.length; i++) {\n\n                array_buffer[i] = buf.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n            }\n            return array_buffer.buffer || array_buffer;\n        } else {\n\n            return buf;\n        }\n    }\n\n};\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mr.doob / http://mrdoob.com/\n */\n\nvar Detector = {\n\n\tcanvas: !!window.CanvasRenderingContext2D,\n\twebgl: function () {\n\n\t\ttry {\n\n\t\t\tvar canvas = document.createElement('canvas');return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\n\t\t} catch (e) {\n\n\t\t\treturn false;\n\t\t}\n\t}(),\n\tworkers: !!window.Worker,\n\tfileapi: window.File && window.FileReader && window.FileList && window.Blob,\n\n\tgetWebGLErrorMessage: function getWebGLErrorMessage() {\n\n\t\tvar element = document.createElement('div');\n\t\telement.id = 'webgl-error-message';\n\t\telement.style.fontFamily = 'monospace';\n\t\telement.style.fontSize = '13px';\n\t\telement.style.fontWeight = 'normal';\n\t\telement.style.textAlign = 'center';\n\t\telement.style.background = '#fff';\n\t\telement.style.color = '#000';\n\t\telement.style.padding = '1.5em';\n\t\telement.style.width = '400px';\n\t\telement.style.margin = '5em auto 0';\n\n\t\tif (!this.webgl) {\n\n\t\t\telement.innerHTML = window.WebGLRenderingContext ? ['Your graphics card does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\" style=\"color:#000\">WebGL</a>.<br />', 'Find out how to get it <a href=\"http://get.webgl.org/\" style=\"color:#000\">here</a>.'].join('\\n') : ['Your browser does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\" style=\"color:#000\">WebGL</a>.<br/>', 'Find out how to get it <a href=\"http://get.webgl.org/\" style=\"color:#000\">here</a>.'].join('\\n');\n\t\t}\n\n\t\treturn element;\n\t},\n\n\taddGetWebGLMessage: function addGetWebGLMessage(parameters) {\n\n\t\tvar parent, id, element;\n\n\t\tparameters = parameters || {};\n\n\t\tparent = parameters.parent !== undefined ? parameters.parent : document.body;\n\t\tid = parameters.id !== undefined ? parameters.id : 'oldie';\n\n\t\telement = Detector.getWebGLErrorMessage();\n\t\telement.id = id;\n\n\t\tparent.appendChild(element);\n\t}\n\n};\n\n/**\n * @author kennethjiang / https://github.com/kennethjiang\n *\n *\n * Description: Seperator Geometry with unconnected islands into their own Geometries\n *\n */\n\nfunction VertexNode(posIndex) {\n    var self = this;\n    self.neighbors = new Set();\n    self.island = undefined;\n\n    self.addNeighbor = function (vertexNode) {\n        if (vertexNode === self) {\n            return;\n        }\n\n        self.neighbors.add(vertexNode);\n        vertexNode.neighbors.add(self);\n    };\n}\n\nfunction VertexGraph(positions, precisionPoints) {\n    var self = this;\n    self.positions = positions;\n    self.precisionPoints = precisionPoints;\n\n    self.verticesMap = new Map(); // map of { vertexKey -> vertexNode }\n\n    self.vertexKeyForPosition = function (posIndex) {\n\n        // 0 -> x; 1 -> y; 2 -> z\n        var _ref = [self.positions[posIndex], self.positions[posIndex + 1], self.positions[posIndex + 2]],\n            x = _ref[0],\n            y = _ref[1],\n            z = _ref[2];\n\n\n        var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        var precision = Math.pow(10, precisionPoints);\n        return Math.round(x * precision) + '_' + Math.round(y * precision) + '_' + Math.round(z * precision);\n    };\n\n    self.vertexForPosition = function (posIndex) {\n        return self.verticesMap.get(self.vertexKeyForPosition(posIndex));\n    };\n\n    for (var faceIndex = 0; faceIndex < positions.length; faceIndex += 9) {\n        // a face is 9 positions - 3 vertex x 3 positions\n\n        var verticesOfCurrentFace = [];\n        for (var v = 0; v < 3; v++) {\n            var key = self.vertexKeyForPosition(faceIndex + v * 3);\n\n            if (!self.verticesMap.has(key)) {\n                self.verticesMap.set(key, new VertexNode());\n            }\n\n            verticesOfCurrentFace.push(self.verticesMap.get(key));\n        }\n\n        // Since these 3 vertices are on the same face, they are neighbors on the graph\n        verticesOfCurrentFace[0].addNeighbor(verticesOfCurrentFace[1]);\n        verticesOfCurrentFace[0].addNeighbor(verticesOfCurrentFace[2]);\n    }\n\n    self.islands = function () {\n        var allIslands = [];\n\n        self.verticesMap.forEach(function (vertexNode) {\n\n            if (vertexNode.island) {\n                return;\n            }\n\n            var newIsland = {};\n            self.floodFill(vertexNode, newIsland);\n            allIslands.push(newIsland);\n        });\n\n        return allIslands;\n    };\n\n    self.floodFill = function (start, island) {\n\n        // Breadth-first traversal\n        var queue = [];\n\n        // Mark the source node as visited and enqueue it\n        queue.unshift(start);\n        start.island = island;\n\n        while (queue.length > 0) {\n\n            // Dequeue a vertex from queue and print it\n            var v = queue.pop(0);\n\n            // Get all adjacent vertices of the dequeued\n            // vertex s. If a adjacent has not been visited,\n            // then mark it visited and enqueue it\n            v.neighbors.forEach(function (nextV) {\n\n                if (!nextV.island) {\n                    queue.unshift(nextV);\n                    nextV.island = island;\n                }\n            });\n        }\n    };\n}\n\n/**\n * parameters:\n *   - precisionPoints: number of decimal points, e.g. 4 for epsilon of 0.0001. 2 vertices are considered \"the same\" when they are with the distance defined by precisionPoints\n */\n\nfunction IslandSeparator() {\n    var precisionPoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n\n\n    var self = this;\n\n    self.separate = function (geometry) {\n\n        var originalPositions = geometry.attributes.position.array;\n        var originalNormals = geometry.attributes.normal !== undefined ? geometry.attributes.normal.array : undefined;\n        var originalColors = geometry.attributes.color !== undefined ? geometry.attributes.color.array : undefined;\n\n        var graph = new VertexGraph(originalPositions, precisionPoints);\n        var islands = graph.islands();\n        var verticesMap = graph.verticesMap;\n\n        islands.forEach(function (island) {\n            island.faceIndices = []; // List of position indices the faces (the same as position index of 1st vertex of the face) on this island\n        });\n\n        for (var faceIndex = 0; faceIndex < originalPositions.length; faceIndex += 9) {\n            // a face is 9 positions - 3 vertex x 3 positions\n            var islandOfCurrentFace = graph.vertexForPosition(faceIndex).island;\n            islandOfCurrentFace.faceIndices.push(faceIndex);\n        }\n\n        var geometries = islands.map(function (island) {\n\n            // Adopted from STLLoader.js\n            var geometry = new BufferGeometry();\n\n            var vertices = [];\n            var normals = [];\n            var colors = [];\n\n            island.faceIndices.forEach(function (faceIndex) {\n\n                for (var i = 0; i < 9; i++) {\n\n                    vertices.push(originalPositions[faceIndex + i]);\n\n                    if (originalNormals) {\n                        normals.push(originalNormals[faceIndex + i]);\n                    }\n\n                    if (originalColors) {\n                        colors.push(originalColors[faceIndex + i]);\n                    }\n                }\n            });\n\n            geometry.addAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n\n            if (originalNormals) {\n                geometry.addAttribute('normal', new BufferAttribute(new Float32Array(normals), 3));\n            }\n\n            if (originalColors) {\n                geometry.addAttribute('color', new BufferAttribute(new Float32Array(colors), 3));\n            }\n\n            return geometry;\n        });\n\n        return geometries;\n    };\n}\n\n/**\n * @author kovacsv / http://kovacsv.hu/\n * @author mrdoob / http://mrdoob.com/\n * @author mudcube / http://mudcu.be/\n */\n\nfunction STLBinaryExporter() {}\n\nSTLBinaryExporter.prototype = {\n\n\tconstructor: STLBinaryExporter,\n\n\tparse: function () {\n\n\t\tvar vector = new Vector3();\n\t\tvar normalMatrixWorld = new Matrix3();\n\n\t\treturn function parse(scene) {\n\n\t\t\t// We collect objects first, as we may need to convert from BufferGeometry to Geometry\n\t\t\tvar objects = [];\n\t\t\tvar triangles = 0;\n\t\t\tscene.traverse(function (object) {\n\n\t\t\t\tif (!(object instanceof Mesh)) return;\n\n\t\t\t\tvar geometry = object.geometry;\n\t\t\t\tif (geometry instanceof BufferGeometry) {\n\n\t\t\t\t\tgeometry = new Geometry().fromBufferGeometry(geometry);\n\t\t\t\t}\n\n\t\t\t\tif (!(geometry instanceof Geometry)) return;\n\t\t\t\ttriangles += geometry.faces.length;\n\n\t\t\t\tobjects.push({\n\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmatrix: object.matrixWorld\n\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tvar offset = 80; // skip header\n\t\t\tvar bufferLength = triangles * 2 + triangles * 3 * 4 * 4 + 80 + 4;\n\t\t\tvar arrayBuffer = new ArrayBuffer(bufferLength);\n\t\t\tvar output = new DataView(arrayBuffer);\n\t\t\toutput.setUint32(offset, triangles, true);offset += 4;\n\n\t\t\t// Traversing our collected objects\n\t\t\tobjects.forEach(function (object) {\n\n\t\t\t\tvar vertices = object.geometry.vertices;\n\t\t\t\tvar faces = object.geometry.faces;\n\n\t\t\t\tnormalMatrixWorld.getNormalMatrix(object.matrix);\n\n\t\t\t\tfor (var i = 0, l = faces.length; i < l; i++) {\n\n\t\t\t\t\tvar face = faces[i];\n\n\t\t\t\t\tvector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();\n\n\t\t\t\t\toutput.setFloat32(offset, vector.x, true);offset += 4; // normal\n\t\t\t\t\toutput.setFloat32(offset, vector.y, true);offset += 4;\n\t\t\t\t\toutput.setFloat32(offset, vector.z, true);offset += 4;\n\n\t\t\t\t\tvar indices = [face.a, face.b, face.c];\n\n\t\t\t\t\tfor (var j = 0; j < 3; j++) {\n\n\t\t\t\t\t\tvector.copy(vertices[indices[j]]).applyMatrix4(object.matrix);\n\n\t\t\t\t\t\toutput.setFloat32(offset, vector.x, true);offset += 4; // vertices\n\t\t\t\t\t\toutput.setFloat32(offset, vector.y, true);offset += 4;\n\t\t\t\t\t\toutput.setFloat32(offset, vector.z, true);offset += 4;\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.setUint16(offset, 0, true);offset += 2; // attribute byte count\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn output;\n\t\t};\n\t}()\n\n};\n\nexport { TransformControls, OrbitControls$1 as OrbitControls, STLLoader, Detector, IslandSeparator, STLBinaryExporter };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n","/**\n * @author kennethjiang / https://github.com/kennethjiang\n *\n *\n * Description: A THREE view port for STL models\n *\n * Usage:\n *  var viewPort = new THREE.STLViewPort(canvas, width, height, function() {\n *     //things to do when any model in the view port changes\n *  });\n *  viewPort.init();\n *  viewPort.loadSTL(url, fucntion(model) {\n *     viewPort.makeModelActive(model);\n *     //things to do when model is loaded\n *  });\n *  var scene = viewPort.scene; // direct access to the scene for to add THREE.Object\n *\n */\n\n\n'use strict';\n\nimport * as THREETK from '3tk';\n\nexport function STLViewPort( canvas, width, height, onChange, onNewModel ) {\n\n    var self = this;\n\n    self.canvas = canvas;\n    self.canvasWidth = width;\n    self.canvasHeight = height;\n    self.onChange = onChange;\n    self.onNewModel = onNewModel;\n\n    self.models = [];\n\n    self.effectController = {\n        metalness: 0.5,\n        roughness: 0.5,\n        modelInactiveColor: new THREE.Color(\"#60715b\"),\n        modelActiveColor: new THREE.Color(\"#34bf0d\"),\n        ambientLightColor: new THREE.Color(\"#2b2b2b\"),\n        directionalLightColor: new THREE.Color(\"#ffffff\"),\n    };\n\n    self.init = function() {\n\n        self.camera = new THREE.PerspectiveCamera( 45, 1.0, 0.1, 5000 );\n\n        self.camera.up.set( 0, 0, 1 );\n        self.camera.position.set( -100, -200, 250 );\n\n        self.scene = new THREE.Scene();\n\n        // Lights\n        var ambientLight = new THREE.AmbientLight( self.effectController.ambientLightColor );  // 0.2\n        self.scene.add( ambientLight );\n        var directionalLight = new THREE.DirectionalLight(self.effectController.directionalLightColor, 1.0);\n        directionalLight.position.set( 100, 100, 500 );\n        self.scene.add( directionalLight );\n        var directionalLight2= new THREE.DirectionalLight(self.effectController.directionalLightColor, 1.0);\n        directionalLight2.position.set( 100, 100, -500);\n        self.scene.add( directionalLight2);\n\n        self.renderer = new THREE.WebGLRenderer( { canvas: self.canvas, antialias: true } );\n\n        self.renderer.setClearColor( 0xd8d8d8 );\n        self.renderer.setSize( self.canvasWidth, self.canvasHeight );\n        self.renderer.setPixelRatio( window.devicePixelRatio );\n\n        self.renderer.gammaInput = true;\n        self.renderer.gammaOutput = true;\n\n        self.orbitControls = new THREETK.OrbitControls(self.camera, self.renderer.domElement);\n\n        self.orbitControls.enableDamping = true;\n        self.orbitControls.dampingFactor = 0.25;\n        self.orbitControls.enablePan = false;\n        self.orbitControls.addEventListener(\"change\", self.render);\n\n        self.transformControls = new THREETK.TransformControls(self.camera, self.renderer.domElement);\n\n        self.transformControls.setRotationSnap( THREE.Math.degToRad( 15 ) )\n        self.transformControls.addEventListener(\"change\", self.render);\n        self.transformControls.addEventListener(\"mouseDown\", self.startTransform);\n        self.transformControls.addEventListener(\"mouseUp\", self.endTransform);\n        self.transformControls.addEventListener(\"change\", self.onChange);\n        self.scene.add(self.transformControls);\n\n        window.addEventListener( 'keydown', function ( event ) {\n            switch ( event.keyCode ) {\n                case 17: // Ctrl\n                    self.transformControls.setRotationSnap(null);\n                    break;\n            }\n        });\n\n        window.addEventListener( 'keyup', function ( event ) {\n            switch ( event.keyCode ) {\n                case 17: // Ctrl\n                    self.transformControls.setRotationSnap( THREE.Math.degToRad( 15 ) );\n                    break;\n            }\n        });\n\n        // Unforutnately built-in \"click\" event is fired when it's a drag. We need all these complexity to detect real click (no mousemoves between mousedown and mouseup)\n        self.canvas.addEventListener(\"mousedown\", function() { self.lastMouseEvent = \"mousedown\" });\n        self.canvas.addEventListener(\"mousemove\", function() { self.lastMouseEvent = \"mousemove\" });\n        self.canvas.addEventListener(\"mouseup\", function(e) { if (self.lastMouseEvent == \"mousedown\") self.pickActiveModel(e); });\n\n        self.render();\n    };\n\n    self.render = function() {\n        self.orbitControls.update();\n        self.transformControls.update();\n        self.renderer.render( self.scene, self.camera );\n    };\n\n\n    self.loadSTL = function ( url, onLoad ) {\n        new THREETK.STLLoader().load(url, function ( geometry ) {\n            self.onNewModel([\n                self.addModelOfGeometry(geometry)\n            ]);\n        });\n    };\n\n    self.addModelOfGeometry = function( geometry, modelToCopyTransformFrom ) {\n        var material = new THREE.MeshStandardMaterial({\n            color: self.effectController.modelInactiveColor,  // We'll mark it active below.\n            shading: THREE.SmoothShading,\n            side: THREE.DoubleSide,\n            metalness: self.effectController.metalness,\n            roughness: self.effectController.roughness });\n\n        var stlModel = new THREE.Mesh( geometry, material );\n\n        // center model's origin\n        var center = new THREE.Box3().setFromObject(stlModel).center();\n        var model = new THREE.Object3D();\n        model.add(stlModel);\n        stlModel.position.copy(center.negate());\n        if (modelToCopyTransformFrom) {\n            model.rotation.copy(modelToCopyTransformFrom.rotation);\n            model.scale.copy(modelToCopyTransformFrom.scale);\n        }\n\n        self.scene.add(model);\n        self.render();\n\n        self.models.push(model);\n        return model;\n    };\n\n    self.activeModel = function() {\n        return self.transformControls.object;\n    }\n\n    self.pickActiveModel = function( event ) {\n        var rect = self.canvas.getBoundingClientRect();\n        var x = (event.clientX - rect.left) / rect.width;\n        var y = (event.clientY - rect.top) / rect.height;\n\n        var pointerVector = new THREE.Vector2();\n        pointerVector.set((x*2) - 1, -(y*2) + 1);\n        var ray = new THREE.Raycaster();\n        ray.setFromCamera(pointerVector, self.camera);\n\n        // Clicking should cycle through the stlFiles if there are multiple under the cursor.\n        var foundActiveModel = false;\n        var nextPointedModel = undefined;\n        var firstPointedModel = undefined;\n        for (var i = 0; i < self.models.length; i++) {\n            var model = self.models[i];\n            var intersections = ray.intersectObjects( model.children, true ); // Not sure why ray will intersect the children but not the model itself.\n            if (!intersections[0]) {\n                continue;\n            }\n            if (!firstPointedModel) {\n                firstPointedModel = model;\n            }\n            if (foundActiveModel && !nextPointedModel) {\n                nextPointedModel = model;\n            }\n            if (self.activeModel() == model) {\n                foundActiveModel = true;\n            }\n        }\n        if (nextPointedModel) {\n            self.makeModelActive(nextPointedModel);\n        } else if (firstPointedModel) {\n            self.makeModelActive(firstPointedModel);\n        }\n    };\n\n    /**\n     * params:\n     *    m: model to make active. Clear active model if m is undefined\n     *\n     */\n    self.makeModelActive = function(m) {\n        // Sets one file active and inactivates all the others.\n        if (m) {\n            self.transformControls.attach(m);\n        } else {\n            self.transformControls.detach();\n        }\n\n        for (var i = 0; i < self.models.length; i++) {\n            var model = self.models[i];\n            if (model == self.activeModel()) {\n                model.children[0].material.color.copy(self.effectController.modelActiveColor);\n            } else {\n                model.children[0].material.color.copy(self.effectController.modelInactiveColor);\n            }\n        }\n\n        self.render();\n        self.onChange();\n    };\n\n    self.removeActiveModel = function() {\n        if (!self.activeModel()) {\n            return undefined;\n        } else {\n            var model = self.activeModel();\n\n            var index = self.models.indexOf(model);\n            if (index > -1) {\n                self.models.splice(index, 1);\n            }\n\n            self.scene.remove(model);\n            self.makeModelActive(undefined);\n            return model;\n        }\n    };\n\n    self.removeAllModels = function() {\n        for (var i = 0; i < self.models.length; i++) {\n            self.scene.remove(self.models[i]);\n        }\n        self.models = [];\n        self.makeModelActive(undefined);\n    }\n\n    self.splitActiveModel = function() {\n        if (!self.activeModel()) {\n            return;\n        } else {\n            var originalModel = self.removeActiveModel()\n            var geometry = originalModel.children[0].geometry;\n            var newGeometries = GeometryUtils.split(geometry);\n            self.onNewModel(\n                newGeometries.map( function(geometry) {\n                    return self.addModelOfGeometry( geometry, originalModel );\n                })\n            );\n        }\n    };\n\n    self.onlyOneOriginalModel = function() {\n        return self.models.length == 1  &&\n            self.models[0].position.x == 0.0 &&\n            self.models[0].position.y == 0.0 &&\n            self.models[0].rotation.x == 0.0 &&\n            self.models[0].rotation.y == 0.0 &&\n            self.models[0].rotation.z == 0.0 &&\n            self.models[0].scale.x == 1.0 &&\n            self.models[0].scale.y == 1.0 &&\n            self.models[0].scale.z == 1.0\n    };\n\n    self.startTransform = function () {\n        // Disable orbit controls\n        self.orbitControls.enabled = false;\n    };\n\n    self.endTransform = function () {\n        // Enable orbit controls\n        self.orbitControls.enabled = true;\n    };\n\n}\n","/*\n * View model for OctoPrint-Slicer\n *\n * Author: Kenneth Jiang\n * License: AGPLv3\n */\nko.bindingHandlers.numericValue = {\n    init : function(element, valueAccessor, allBindings, data, context) {\n        var interceptor = ko.computed({\n            read: function() {\n                return ko.unwrap(valueAccessor());\n            },\n            write: function(value) {\n                if (!isNaN(value)) {\n                    valueAccessor()(parseFloat(value));\n                }\n            },\n            disposeWhenNodeIsRemoved: element\n        });\n\n        ko.applyBindingsToNode(element, { value: interceptor }, context);\n    }\n};\n\nexport function OverridesViewModel(parameters, array_keys, enum_keys, item_keys, boolean_keys) {\n    var self = this;\n    self.slicingViewModel = parameters[0];\n\n    var ARRAY_KEYS = [\n        \"print_temperature\",\n        \"start_gcode\",\n        \"end_gcode\",\n        \"filament_diameter\"\n    ],\n        ENUM_KEYS = {\n            \"support\" : ko.observableArray([\"none\", \"buildplate\", \"everywhere\"]),\n            \"platform_adhesion\" : ko.observableArray([\"none\", \"brim\", \"raft\"])\n        },\n        ITEM_KEYS = [\n            \"layer_height\",\n            \"temperature\",\n            \"bed_temperature\",\n            \"print_bed_temperature\",\n            \"fill_density\",\n            \"wall_thickness\",\n            \"print_speed\",\n            \"solid_layer_thickness\",\n            \"travel_speed\",\n            \"outer_shell_speed\",\n            \"inner_shell_speed\",\n            \"infill_speed\",\n            \"bottom_layer_speed\",\n            \"filament_flow\",\n            \"retraction_speed\",\n            \"retraction_amount\",\n            \"extrusion_multiplier\",\n        ],\n        BOOLEAN_KEYS = [\n            \"support_material\",\n            \"overhangs\",\n            \"retraction_enable\",\n            \"fan_enabled\",\n            \"cooling\"\n        ];\n    var ALL_KEYS = BOOLEAN_KEYS.concat(ITEM_KEYS).concat(ARRAY_KEYS).concat(Object.keys(ENUM_KEYS));\n\n    // initialize all observables\n    _.forEach(ALL_KEYS, function(k) { self[\"profile.\" + k] = ko.observable(); });\n\n    self.optionsForKey = function(key) {\n        return ENUM_KEYS[key];\n    };\n\n    self.updateOverridesFromProfile = function(profile) {\n\n        // Some options are numeric but might have a percent sign after them.\n        // Remove the percent and save it to replace later.\n        self.endings = {};\n        var stripEndings = function(m, k) {\n            if (_.isString(m[k]) && m[k].endsWith(\"%\")) {\n                self.endings[k] = \"%\";\n                return m[k].slice(0,-1);\n            } else {\n                return m[k];\n            }\n        }\n\n        // Some options are booleans but can be stored as 0/1 or false/true.\n        // Convert to native true/false and keep track of the style.\n        self.booleans = {};\n        var convertBoolean = function(m, k) {\n            var BOOLS = [\n                [\"false\", \"true\"],\n                [\"False\", \"True\"],\n                [\"0\", \"1\"],\n            ];\n            if (m[k] === undefined) {\n                return undefined;\n            }\n            for (var boolType = 0; boolType < BOOLS.length; boolType++) {\n                for (var b = 0; b < BOOLS[boolType].length; b++) {\n                    if (m[k] === BOOLS[boolType][b]) {\n                        self.booleans[k] = BOOLS[boolType];\n                        return !!b;  // Convert 0 to false and 1 to true.\n                    }\n                }\n            }\n            return !!m[k]; // Just take a guess if we can't figure it out.\n        }\n\n\n        // Some options are arrays in cura but not Slic3r.  Keep track of which.\n        self.isArray = [];\n\n        _.forEach(ITEM_KEYS, function(k) { self[\"profile.\" + k]( stripEndings(profile,k) ); });\n        _.forEach(BOOLEAN_KEYS, function(k) { self[\"profile.\" + k]( convertBoolean(profile,k) ); });\n        _.forEach(ENUM_KEYS, function(v, k) { self[\"profile.\" + k]( profile[k] ); });\n        _.forEach(ARRAY_KEYS, function(k) {\n            // Some config options are arrays in cura but not in Slic3r.\n            // Detect which ones are arrays and only convert those.\n            if (_.isArray(profile[k])) {\n                self.isArray.push(k);  // Remember this for later.\n                self[\"profile.\" + k](profile[k][0]);\n            } else {\n                self[\"profile.\" + k](profile[k]);\n            }});\n    };\n\n\n    self.onProfileChange = function(newValue) {\n        if (newValue === undefined) {  // For some reason KO would fire event with newValue=undefined,\n            return;  // in which case we should ignore it otherwise things get messed up\n        }\n\n        var slicing = self.slicingViewModel;\n\n        if( !slicing.slicer() || !slicing.profile() ) {\n            return;\n        }\n\n        self.fetchSlicingProfile( slicing.slicer(), slicing.profile() );\n    };\n\n    self.fetchSlicingProfile = function(slicer, profile) {\n        if (self.profileAjax) {\n            self.profileAjax.abort();\n            self.profileAjax = undefined;\n        }\n\n        self.profileAjax = $.ajax({\n            url: API_BASEURL + \"slicing/\" + slicer + \"/profiles/\" + profile,\n            type: \"GET\",\n            // On success\n            success: function(data) {\n                self.updateOverridesFromProfile(data.data);\n            }\n        });\n    };\n\n    self.slicingViewModel.profile.subscribe( self.onProfileChange );\n    //\n    //End of Profile-handling mess\n\n\n    self.toJS = function() {\n        var result = ko.mapping.toJS(self, {\n            ignore: [\"slicingViewModel\",\n                \"updateOverridesFromProfile\",\n                \"updateOverrides\",\n                \"toJS\",\n                \"optionsForKey\",\n                \"stripEndings\",\n                \"isArray\",\n                \"endings\"]\n        });\n        _.forEach(ITEM_KEYS, function(k) {\n            if(self.endings.hasOwnProperty(k)) {\n                result[\"profile.\" + k] += self.endings[k];\n            }});\n        _.forEach(BOOLEAN_KEYS, function(k) {\n            if(self.booleans.hasOwnProperty(k)) {\n                // Convert false/true to the correct string.\n                result[\"profile.\" + k] = self.booleans[k][result[\"profile.\" + k]?1:0];\n            }});\n\n        for (var key in result) {\n            var baseKey = key.replace(\"profile.\", \"\");\n            // Convert it back to an array if it was an array originally.\n            if (_.contains(ARRAY_KEYS, baseKey) && _.contains(self.isArray, baseKey)) {\n                result[key] = [result[key]];\n            }\n        }\n\n        _.forEach(result, function(k) {\n            // If the value is undefined, must not be valid for this slicer.\n            if (result[k] === undefined) {\n                delete result[k];\n            }\n        });\n        return result;\n    };\n}\n\n// view model class, parameters for constructor, container to bind to\nOCTOPRINT_VIEWMODELS.push([\n    OverridesViewModel,\n    [ \"slicingViewModel\" ],\n    [ \"#basic_overrides\", \"#advanced_overrides\" ]\n]);\n","'use strict';\n\nimport * as THREE from 'three';\n\nexport function ModelArranger() {\n\n    var self = this;\n\n    var sort =  {\n\n        w       : function (a,b) { return b.w - a.w; },\n        h       : function (a,b) { return b.h - a.h; },\n        a       : function (a,b) { return b.area - a.area; },\n        max     : function (a,b) { return Math.max(b.w, b.h) - Math.max(a.w, a.h); },\n        min     : function (a,b) { return Math.min(b.w, b.h) - Math.min(a.w, a.h); },\n\n        height  : function (a,b) { return sort.msort(a, b, ['h', 'w']);               },\n        width   : function (a,b) { return sort.msort(a, b, ['w', 'h']);               },\n        area    : function (a,b) { return sort.msort(a, b, ['a', 'h', 'w']);          },\n        maxside : function (a,b) { return sort.msort(a, b, ['max', 'min', 'h', 'w']); },\n\n        msort: function(a, b, criteria) { /* sort by multiple criteria */\n            var diff, n;\n            for (n = 0 ; n < criteria.length ; n++) {\n                diff = sort[criteria[n]](a,b);\n                if (diff != 0)\n                    return diff;\n            }\n            return 0;\n        }\n\n    };\n\n    function applyPackResult(rect, packer) {\n        rect.model.position.x = rect.fit.x - packer.root.w*0.5 + rect.w*0.5;\n        rect.model.position.y = rect.fit.y - packer.root.h*0.5 + rect.h*0.5;\n    };\n\n    function projectedRectOnXY( model ) {\n        var margin = 10.0;\n        var modelBox = new THREE.Box3().setFromObject(model);\n        var width = modelBox.max.x - modelBox.min.x + margin;\n        var height = modelBox.max.y - modelBox.min.y + margin;\n        return { w: width, h: height, area: width*height, model: model };\n    };\n\n    self.arrange = function(models) {\n        var modelRectMap = models.reduce( function( map, model ) {\n            return map.set(model, projectedRectOnXY(model));\n        }, new Map());\n\n        // loop through all sorting criteria, and pick the best one (with smalles overall area)\n        var criteria = ['w', 'h', 'a', 'max', 'min', 'height', 'width', 'area', 'maxside'];\n        var allPackers = criteria.map( function( crit ) {\n\n            var rects = models.map( function(model) { return modelRectMap.get(model); });\n            rects.sort( sort[crit] );\n\n            var packer = new GrowingPacker();\n            packer.fit(rects);\n\n            return {packer: packer, rects: rects};\n        });\n\n        var packersSortedByArea = allPackers.filter( function( result ) {\n            return ! result.rects.some( function(rect) { return !rect.fit; } );\n        }).sort( function(a, b) {\n            return b.packer.root.area - a.packer.root.area;\n        });\n\n        if (packersSortedByArea.length > 0) {\n            packersSortedByArea[0].rects.forEach( function( rect ) { applyPackResult(rect, packersSortedByArea[0].packer); });\n        }\n    };\n\n}\n","/*\n * View model for OctoPrint-Slicer\n *\n * Author: Kenneth Jiang\n * License: AGPLv3\n */\n\n'use strict';\n\nimport * as THREETK from '3tk';\nimport { STLViewPort } from './STLViewPort';\nimport { OverridesViewModel } from './profile_overrides';\nimport { ModelArranger } from './ModelArranger';\n\nif (window.location.hostname != \"localhost\") {\n    Raven.config('https://85bd9314656d40da9249aec5a32a2b52@sentry.io/141297', {\n        release: '0.9.6',\n        ignoreErrors: [\n            \"Failed to execute 'arc' on 'CanvasRenderingContext2D': The radius provided\",\n            \"Cannot read property 'highlightFill' of undefined\",\n            \"Argument 1 of SVGMatrix.translate is not a finite floating-point value\",\n            /_jp.*is not a function/,\n        ],\n    }).install();\n}\n\nfunction SlicerViewModel(parameters) {\n    mixpanel.track(\"App Loaded\");\n\n    var self = this;\n\n    self.canvas = document.getElementById( 'slicer-canvas' );\n\n    //check if webGL is present. If not disable Slicer plugin\n    if ( ! THREETK.Detector.webgl ) {\n        $('#tab_plugin_slicer').empty().append(\"<h3>Slicer Plugin is disabled because your browser doesn't support WebGL</h3>\");\n        return;\n    }\n\n    // assign the injected parameters, e.g.:\n    self.slicingViewModel = parameters[0];\n    self.overridesViewModel = parameters[1];\n    self.printerStateViewModel = parameters[2];\n    self.printerProfilesViewModel = parameters[3];\n\n    self.lockScale = true;\n    self.selectedSTL = undefined;\n    self.newPrint = true;\n\n\n    // Override slicingViewModel.show to surpress default slicing behavior\n    self.slicingViewModel.show = function(target, file, force) {\n        if (!self.slicingViewModel.enableSlicingDialog() && !force) {\n            return;\n        }\n        mixpanel.track(\"Load STL\");\n\n        $('a[href=\"#tab_plugin_slicer\"]').tab('show');\n\n        self.selectedSTL = {target: target, file: file};\n        if (self.newPrint) {\n            self.addToNewPrint();\n        } else {\n            $(\"#plugin-slicer-load-model\").modal(\"show\");\n        }\n    };\n\n    self.addToNewPrint = function() {\n        self.clearPrint();\n        self.addToExistingPrint();\n    };\n\n    self.addToExistingPrint = function() {\n        self.setSlicingViewModel(self.selectedSTL.target, self.selectedSTL.file);\n        self.addSTL(self.selectedSTL.target, self.selectedSTL.file);\n        self.selectedSTL = undefined;\n\n        $(\"#plugin-slicer-load-model\").modal(\"hide\");\n    };\n\n    self.clearPrint = function() {\n        self.resetSlicingViewModel();\n        self.stlViewPort.removeAllModels();\n        self.newPrint = true;\n    }\n\n    self.addSTL = function(target, file) {\n        self.newPrint = false;\n        self.stlViewPort.loadSTL(BASEURL + \"downloads/files/\" + target + \"/\" + file);\n    }\n\n    self.onModelAdd = function(models) {\n\n        self.stlViewPort.makeModelActive(models[0]);\n\n        models.forEach( function( model ) {\n            self.fixZPosition(model);\n        });\n\n        if (self.stlViewPort.models.length > 1) {\n            new ModelArranger().arrange(self.stlViewPort.models);\n        }\n        self.stlViewPort.render();\n\n        $('#tab_plugin_slicer > div.translucent-blocker').hide();\n\n    };\n\n    self.onModelRemove = function(model) {\n        if (self.stlViewPort.models.length == 0) {\n            self.clearPrint();\n        }\n    };\n\n    self.updatePrinterBed = function(profileName) {\n        if ( profileName) {\n            var profile = self.printerProfilesViewModel.profiles.items().find(function(p) { return p.id == profileName })\n\n            var dim = profile.volume\n            self.BEDSIZE_X_MM = dim.width;\n            self.BEDSIZE_Y_MM = dim.depth;\n            self.BEDSIZE_Z_MM = dim.height;\n            if (dim.origin == \"lowerleft\" ) {\n                self.ORIGIN_OFFSET_X_MM = self.BEDSIZE_X_MM/2.0;\n                self.ORIGIN_OFFSET_Y_MM = self.BEDSIZE_Y_MM/2.0;\n            } else {\n                self.ORIGIN_OFFSET_X_MM = 0;\n                self.ORIGIN_OFFSET_Y_MM = 0;\n            }\n        }\n        self.drawBedFloor(self.BEDSIZE_X_MM, self.BEDSIZE_Y_MM);\n        self.drawWalls(self.BEDSIZE_X_MM, self.BEDSIZE_Y_MM, self.BEDSIZE_Z_MM);\n        self.stlViewPort.render();\n    }\n\n    self.slicingViewModel.printerProfile.subscribe( self.updatePrinterBed );\n\n    self.BEDSIZE_X_MM = 200;\n    self.BEDSIZE_Y_MM = 200;\n    self.BEDSIZE_Z_MM = 200;\n    self.ORIGIN_OFFSET_X_MM = 0;\n    self.ORIGIN_OFFSET_Y_MM = 0;\n\n    var CANVAS_WIDTH = 588,\n        CANVAS_HEIGHT = 588;\n\n\n    self.init = function() {\n\n        self.slicingViewModel.requestData();\n\n        self.stlViewPort = new STLViewPort(self.canvas, CANVAS_WIDTH, CANVAS_HEIGHT, self.onModelChange, self.onModelAdd)\n        self.stlViewPort.init();\n\n        //Walls and Floor\n        self.walls = new THREE.Object3D();\n        self.floor = new THREE.Object3D();\n        self.stlViewPort.scene.add(self.walls);\n        self.stlViewPort.scene.add(self.floor);\n\n        self.updatePrinterBed();\n\n        ko.applyBindings(self.slicingViewModel, $('#slicing-settings')[0]);\n\n        // Buttons on the canvas, and their behaviors.\n        // TODO: it's not DRY. mix of prez code and logics. need to figure out a better way\n        $(\"#slicer-viewport\").empty().append('<div class=\"report\"><span>Got issues or suggestions? <a target=\"_blank\" href=\"https://github.com/kennethjiang/OctoPrint-Slicer/issues/new\">Click here!</a></span></div>\\\n                  <div class=\"model\">\\\n                    <button class=\"translate disabled\" title=\"Move\"><img src=\"'\n            + PLUGIN_BASEURL\n            + 'slicer/static/img/translate.png\"></button>\\\n                    <button class=\"rotate disabled\" title=\"Rotate\"><img src=\"'\n            + PLUGIN_BASEURL\n            + 'slicer/static/img/rotate.png\"></button>\\\n                    <button class=\"scale disabled\" title=\"Scale\"><img src=\"'\n            + PLUGIN_BASEURL\n            + 'slicer/static/img/scale.png\"></button>\\\n                    <button class=\"remove disabled\" title=\"Remove\"><img src=\"'\n            + PLUGIN_BASEURL\n            + 'slicer/static/img/remove.png\"></button>\\\n                    <button class=\"split disabled\" title=\"Split\"><img src=\"'\n            + PLUGIN_BASEURL\n            + 'slicer/static/img/split.png\"></button>\\\n                </div>\\\n                <div class=\"values translate\">\\\n                    <div>\\\n                        <p><span class=\"axis x\">X</span><input type=\"number\" step=\"any\" name=\"x\"><span title=\"\">mm</span></p>\\\n                        <p><span class=\"axis y\">Y</span><input type=\"number\" step=\"any\" name=\"y\"><span title=\"\">mm</span></p>\\\n                        <span></span>\\\n                    </div>\\\n               </div>\\\n                <div class=\"values rotate\">\\\n                    <div>\\\n                        <p><span class=\"axis x\">X</span><input type=\"number\" step=\"any\" name=\"x\"><span title=\"\">°</span></p>\\\n                        <p><span class=\"axis y\">Y</span><input type=\"number\" step=\"any\" name=\"y\"><span title=\"\">°</span></p>\\\n                        <p><span class=\"axis z\">Z</span><input type=\"number\" step=\"any\" name=\"z\"><span title=\"\">°</span></p>\\\n                        <span></span>\\\n                    </div>\\\n               </div>\\\n                <div class=\"values scale\">\\\n                    <div>\\\n                        <p><span class=\"axis x\">X</span><input type=\"number\" step=\"0.001\" name=\"x\" min=\"0.001\"></p>\\\n                        <p><span class=\"axis y\">Y</span><input type=\"number\" step=\"0.001\" name=\"y\" min=\"0.001\"></p>\\\n                        <p><span class=\"axis z\">Z</span><input type=\"number\" step=\"0.001\" name=\"z\" min=\"0.001\"></p>\\\n                        <p class=\"checkbox\"><label><input type=\"checkbox\" checked>Lock</label></p>\\\n                        <span></span>\\\n                    </div>\\\n               </div>');\n\n        $(\"#slicer-viewport\").append(self.stlViewPort.renderer.domElement);\n\n        $(\"#slicer-viewport button.translate\").click(function(event) {\n            self.stlViewPort.transformControls.setMode(\"translate\");\n            self.stlViewPort.transformControls.space = \"world\";\n            self.toggleValueInputs($(\"#slicer-viewport .translate.values div\"));\n        });\n        $(\"#slicer-viewport button.rotate\").click(function(event) {\n            self.stlViewPort.transformControls.setMode(\"rotate\");\n            self.stlViewPort.transformControls.space = \"world\";\n            self.toggleValueInputs($(\"#slicer-viewport .rotate.values div\"));\n        });\n        $(\"#slicer-viewport button.scale\").click(function(event) {\n            self.stlViewPort.transformControls.setMode(\"scale\");\n            self.stlViewPort.transformControls.space = \"local\";\n            self.toggleValueInputs($(\"#slicer-viewport .scale.values div\"));\n        });\n        $(\"#slicer-viewport button.remove\").click(function(event) {\n            self.onModelRemove( self.stlViewPort.removeActiveModel() );\n        });\n        $(\"#slicer-viewport button.split\").click(function(event) {\n            self.onModelRemove( self.stlViewPort.splitActiveModel() );\n        });\n        $(\"#slicer-viewport .values input\").change(function() {\n            self.applyValueInputs($(this));\n        });\n\n    };\n\n    self.toggleValueInputs = function(parentDiv) {\n        if ( parentDiv.hasClass(\"show\") ) {\n            parentDiv.removeClass(\"show\").children('p').removeClass(\"show\");\n        } else if (self.stlViewPort.activeModel()) {\n            $(\"#slicer-viewport .values div\").removeClass(\"show\");\n            parentDiv.addClass(\"show\").children('p').addClass(\"show\");\n        }\n    };\n\n    self.applyValueInputs = function(input) {\n        input.blur();\n        if(input[0].type == \"checkbox\") {\n            self.lockScale = input[0].checked;\n        }\n        else if(input[0].type == \"number\" && !isNaN(parseFloat(input.val()))) {\n            input.val(parseFloat(input.val()).toFixed(3));\n            var model = self.stlViewPort.activeModel();\n\n            if (input.closest(\".values\").hasClass(\"scale\") && self.lockScale) {\n                $(\"#slicer-viewport .scale.values input\").val(input.val());\n                console.log($(\"#slicer-viewport .scale.values input[name=\\\"x\\\"]\").val());\n            }\n\n            model.position.x =  parseFloat($(\"#slicer-viewport .translate.values input[name=\\\"x\\\"]\").val())\n            model.position.y =  parseFloat($(\"#slicer-viewport .translate.values input[name=\\\"y\\\"]\").val())\n            model.rotation.x =  THREE.Math.degToRad($(\"#slicer-viewport .rotate.values input[name=\\\"x\\\"]\").val());\n            model.rotation.y =  THREE.Math.degToRad($(\"#slicer-viewport .rotate.values input[name=\\\"y\\\"]\").val());\n            model.rotation.z =  THREE.Math.degToRad($(\"#slicer-viewport .rotate.values input[name=\\\"z\\\"]\").val());\n            model.scale.x =  parseFloat($(\"#slicer-viewport .scale.values input[name=\\\"x\\\"]\").val())\n            model.scale.y =  parseFloat($(\"#slicer-viewport .scale.values input[name=\\\"y\\\"]\").val())\n            model.scale.z =  parseFloat($(\"#slicer-viewport .scale.values input[name=\\\"z\\\"]\").val())\n            self.fixZPosition(model);\n            self.stlViewPort.render();\n        }\n    };\n\n    self.fixZPosition = function ( model ) {\n        var bedLowMinZ = 0.0;\n        var boundaryBox = new THREE.Box3().setFromObject(model);\n        boundaryBox.min.sub(model.position);\n        boundaryBox.max.sub(model.position);\n        model.position.z -= model.position.z + boundaryBox.min.z - bedLowMinZ;\n    }\n\n    // callback function when models are changed by TransformControls\n    self.onModelChange = function() {\n        var model = self.stlViewPort.activeModel();\n        if (model) {\n            $(\"#slicer-viewport .translate.values input[name=\\\"x\\\"]\").val(model.position.x.toFixed(3)).attr(\"min\", '');\n            $(\"#slicer-viewport .translate.values input[name=\\\"y\\\"]\").val(model.position.y.toFixed(3)).attr(\"min\", '');\n            $(\"#slicer-viewport .rotate.values input[name=\\\"x\\\"]\").val((model.rotation.x * 180 / Math.PI).toFixed(3)).attr(\"min\", '');\n            $(\"#slicer-viewport .rotate.values input[name=\\\"y\\\"]\").val((model.rotation.y * 180 / Math.PI).toFixed(3)).attr(\"min\", '');\n            $(\"#slicer-viewport .rotate.values input[name=\\\"z\\\"]\").val((model.rotation.z * 180 / Math.PI).toFixed(3)).attr(\"min\", '');\n            $(\"#slicer-viewport .scale.values input[name=\\\"x\\\"]\").val(model.scale.x.toFixed(3)).attr(\"min\", '');\n            $(\"#slicer-viewport .scale.values input[name=\\\"y\\\"]\").val(model.scale.y.toFixed(3)).attr(\"min\", '');\n            $(\"#slicer-viewport .scale.values input[name=\\\"z\\\"]\").val(model.scale.z.toFixed(3)).attr(\"min\", '');\n            $(\"#slicer-viewport .scale.values input[type=\\\"checkbox\\\"]\").checked = self.lockScale;\n            self.fixZPosition(model);\n            self.stlViewPort.render();\n        }\n\n        if (!self.stlViewPort.activeModel()) {\n            $(\"#slicer-viewport .values div\").removeClass(\"show\")\n            $(\"#slicer-viewport button\").addClass(\"disabled\");\n        } else {\n            $(\"#slicer-viewport button\").removeClass(\"disabled\");\n        }\n    };\n\n    // Slicing\n    //\n    self.tempFiles = {};\n    self.removeTempFilesAfterSlicing = function (event) {\n        if ($.inArray(event.data.type, [\"SlicingDone\", \"SlicingFailed\"]) >= 0 &&\n            event.data.payload.stl in self.tempFiles) {\n            OctoPrint.files.delete(event.data.payload.stl_location,\n                event.data.payload.stl);\n            delete self.tempFiles[event.data.payload.stl];\n        }\n    }\n\n    OctoPrint.socket.onMessage(\"event\", self.removeTempFilesAfterSlicing);\n\n    self.sliceRequestData = function(slicingVM, group) {\n        var destinationFilename = slicingVM._sanitize(slicingVM.destinationFilename());\n\n        var destinationExtensions = slicingVM.data[slicingVM.slicer()] && slicingVM.data[slicingVM.slicer()].extensions && slicingVM.data[slicingVM.slicer()].extensions.destination\n            ? slicingVM.data[slicingVM.slicer()].extensions.destination\n            : [\"???\"];\n        if (!_.any(destinationExtensions, function(extension) {\n            return _.endsWith(destinationFilename.toLowerCase(), \".\" + extension.toLowerCase());\n        })) {\n            destinationFilename = destinationFilename + \".\" + destinationExtensions[0];\n        }\n        var groupCenter = new THREE.Vector3(0,0,0);\n        if (group) {\n            groupCenter = new THREE.Box3().setFromObject(group).center();\n        }\n        var data = {\n            command: \"slice\",\n            slicer: slicingVM.slicer(),\n            profile: slicingVM.profile(),\n            printerProfile: slicingVM.printerProfile(),\n            destination: destinationFilename,\n            position: { \"x\": self.ORIGIN_OFFSET_X_MM + groupCenter.x,\n                \"y\": self.ORIGIN_OFFSET_Y_MM + groupCenter.y}\n        };\n        _.extend(data, self.overridesViewModel.toJS());\n\n        if (slicingVM.afterSlicing() == \"print\") {\n            data[\"print\"] = true;\n        } else if (slicingVM.afterSlicing() == \"select\") {\n            data[\"select\"] = true;\n        }\n        return data;\n    };\n\n    self.sendSliceRequest = function(target, filename, data) {\n        $.ajax({\n            url: API_BASEURL + \"files/\" + target + \"/\" + filename,\n            type: \"POST\",\n            dataType: \"json\",\n            contentType: \"application/json; charset=UTF-8\",\n            data: JSON.stringify(data),\n            error: function(jqXHR, textStatus) {\n                new PNotify({title: \"Slicing failed\", text: textStatus, type: \"error\", hide: false});\n            }\n        });\n    };\n\n    self.slice = function() {\n        mixpanel.track(\"Slice Model\");\n\n        var target = self.slicingViewModel.target;\n        var sliceRequestData;\n\n        if (self.stlViewPort.onlyOneOriginalModel()) {\n\n            sliceRequestData = self.sliceRequestData(self.slicingViewModel);\n            self.sendSliceRequest(self.slicingViewModel.target, self.slicingViewModel.file(), sliceRequestData);\n\n        } else {\n\n            var form = new FormData();\n            var group = new THREE.Group();\n            _.forEach(self.stlViewPort.models, function (model) {\n                group.add(model.clone(true));\n            });\n\n            sliceRequestData = self.sliceRequestData(self.slicingViewModel, group);\n\n            var tempFilename = self.tempSTLFilename();\n            form.append(\"file\", self.blobFromModel(group), tempFilename);\n            $.ajax({\n                url: API_BASEURL + \"files/local\",\n                type: \"POST\",\n                data: form,\n                processData: false,\n                contentType: false,\n                // On success\n                success: function(_) {\n                    self.tempFiles[tempFilename] = 1;\n                    self.sendSliceRequest(target, tempFilename, sliceRequestData);\n                },\n                error: function(jqXHR, textStatus) {\n                    new PNotify({title: \"Slicing failed\", text: textStatus, type: \"error\", hide: false});\n                }\n            });\n\n        }\n    };\n\n    self.blobFromModel = function( model ) {\n        var exporter = new THREETK.STLBinaryExporter();\n        return new Blob([exporter.parse(model)], {type: \"text/plain\"});\n    };\n\n    self.isPrinting = ko.computed(function () {\n        return self.printerStateViewModel.isPrinting() ||\n            self.printerStateViewModel.isPaused();\n    });\n\n    self.canSliceNow = ko.computed(function () {\n        // TODO: We should be checking for same_device here, too.\n        return self.slicingViewModel.enableSliceButton() &&\n            !self.isPrinting();\n    });\n    // END: Slicing\n\n    // Helpers for drawing walls and floor\n    //\n    self.createText = function(font, text, width, depth, parentObj) {\n        var textGeometry = new THREE.TextGeometry( text, {\n            font: font,\n            size: 10,\n            height: 0.1,\n            material: 0, extrudeMaterial: 1\n        });\n        var materialFront = new THREE.MeshBasicMaterial( { color: 0x048e06} );\n        var materialSide = new THREE.MeshBasicMaterial( { color: 0x8A8A8A} );\n        var materialArray = [ materialFront, materialSide ];\n        var textMaterial = new THREE.MeshFaceMaterial(materialArray);\n\n        var mesh = new THREE.Mesh( textGeometry, textMaterial );\n        textGeometry.computeBoundingBox();\n        var textWidth = textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x;\n        var textHeight = textGeometry.boundingBox.max.y - textGeometry.boundingBox.min.y;\n        switch (text) {\n            case \"Front\":\n                mesh.position.set(-textWidth/2, -depth/2 - textHeight - 4, 1.0);\n                break;\n            case \"Back\":\n                mesh.position.set(textWidth/2, depth/2 + textHeight + 4, 1.0);\n                mesh.rotation.set(0, 0, Math.PI);\n                break;\n            case \"Left\":\n                mesh.position.set(-width/2 - textHeight - 4, textWidth/2, 1.0);\n                mesh.rotation.set(0, 0, -Math.PI / 2);\n                break;\n            case \"Right\":\n                mesh.position.set(width/2 + textHeight, -textWidth/2, 1.0);\n                mesh.rotation.set(0, 0, Math.PI / 2);\n                break;\n        }\n        parentObj.add(mesh);\n    };\n\n    self.drawBedFloor = function ( width, depth, segments ) {\n        for(var i = self.floor.children.length - 1; i >= 0; i--) {\n            var obj = self.floor.children[i];\n            self.floor.remove(obj);\n        }\n\n        segments = segments || 20;\n        var geometry = new THREE.PlaneGeometry(width, depth, segments, segments);\n        var materialEven = new THREE.MeshBasicMaterial({color: 0xccccfc});\n        var materialOdd = new THREE.MeshBasicMaterial({color: 0x444464});\n        var materials = [materialEven, materialOdd];\n        for (var x = 0; x < segments; x++) {\n            for (var y = 0; y < segments; y++) {\n                var i = x * segments + y;\n                var j = 2 * i;\n                geometry.faces[ j ].materialIndex = geometry.faces[ j + 1 ].materialIndex = (x + y) % 2;\n            }\n        }\n        var mesh = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial(materials));\n        mesh.receiveShadow = true;\n        self.floor.add(mesh);\n\n        //Add text to indicate front/back of print bed\n        var loader = new THREE.FontLoader();\n        loader.load( PLUGIN_BASEURL + \"slicer/static/js/optimer_bold.typeface.json\", function ( font ) {\n            self.createText(font, \"Front\", width, depth, self.floor);\n            self.createText(font, \"Back\", width, depth, self.floor);\n            self.createText(font, \"Left\", width, depth, self.floor);\n            self.createText(font, \"Right\", width, depth, self.floor);\n            self.stlViewPort.render();\n        } );\n    };\n\n    self.drawWalls = function ( width, depth, height ) {\n        for(var i = self.walls.children.length - 1; i >= 0; i--) {\n            var obj = self.walls.children[i];\n            self.walls.remove(obj);\n        }\n\n        var wall1 = self.rectShape( width, height, 0x8888fc );\n        wall1.rotation.x = Math.PI / 2;\n        wall1.position.set(0, depth/2, height/2);\n        self.walls.add(wall1);\n\n        var wall2 = self.rectShape( height, depth, 0x8888dc );\n        wall2.rotation.y = Math.PI / 2;\n        wall2.position.set(-width/2, 0, height/2);\n        self.walls.add(wall2);\n\n        var wall3 = self.rectShape( width, height, 0x8888fc );\n        wall3.rotation.x = -Math.PI / 2;\n        wall3.position.set(0, -depth/2, height/2);\n        self.walls.add(wall3);\n\n        var wall4 = self.rectShape( height, depth, 0x8888dc );\n        wall4.rotation.y = -Math.PI / 2;\n        wall4.position.set(width/2, 0, height/2);\n        self.walls.add(wall4);\n    };\n\n    self.rectShape = function ( rectLength, rectWidth, color ) {\n        var rectShape = new THREE.Shape();\n        rectShape.moveTo( -rectLength/2,-rectWidth/2 );\n        rectShape.lineTo( -rectLength/2, rectWidth/2 );\n        rectShape.lineTo( rectLength/2, rectWidth/2 );\n        rectShape.lineTo( rectLength/2, -rectWidth/2 );\n        rectShape.lineTo( -rectLength/2, -rectWidth/2 );\n        var rectGeom = new THREE.ShapeGeometry( rectShape );\n        return new THREE.Mesh( rectGeom, new THREE.MeshBasicMaterial( { color: color } ) ) ;\n    };\n    // END: Helpers for drawing walls and floor\n\n    self.resetSlicingViewModel = function() {\n        self.slicingViewModel.target = undefined;\n        self.slicingViewModel.file(undefined);\n        self.slicingViewModel.destinationFilename(undefined);\n    };\n\n    self.setSlicingViewModel = function(target, filename) {\n        if (!self.slicingViewModel.destinationFilename()) {  // A model is added to an empty bed\n            self.slicingViewModel.target = target;\n            self.slicingViewModel.file(filename);\n            self.slicingViewModel.destinationFilename(self.computeDestinationFilename(filename));\n        }\n    };\n\n    // Returns the destination filename based on which models are loaded.\n    // The destination filename is without the final .gco on it because\n    // that will depend on the slicer.\n    self.computeDestinationFilename = function(inputFilename) {\n        // TODO: For now, just use the first model's name.\n        var destinationFilename = inputFilename.substr(0, inputFilename.lastIndexOf(\".\"));\n        if (destinationFilename.lastIndexOf(\"/\") != 0) {\n            destinationFilename = destinationFilename.substr(destinationFilename.lastIndexOf(\"/\") + 1);\n        }\n        return destinationFilename;\n    };\n\n    self.tempSTLFilename = function() {\n        var pos = self.slicingViewModel.file().lastIndexOf(\".\")\n        return [self.slicingViewModel.file().slice(0, pos),\n            \".tmp.\" + (+ new Date()),\n            self.slicingViewModel.file().slice(pos)].join('');\n    };\n\n    self.init();\n}\n\n\n// view model class, parameters for constructor, container to bind to\nOCTOPRINT_VIEWMODELS.push([\n    SlicerViewModel,\n\n    // e.g. loginStateViewModel, settingsViewModel, ...\n    [ \"slicingViewModel\", \"overridesViewModel\", \"printerStateViewModel\", \"printerProfilesViewModel\" ],\n\n    // e.g. #settings_plugin_slicer, #tab_plugin_slicer, ...\n    [ \"#slicer\" ]\n]);\n"],"names":["FrontSide","MeshBasicMaterial","LineBasicMaterial","Object3D","Geometry","Mesh","CylinderGeometry","BufferGeometry","Float32BufferAttribute","Line","CylinderBufferGeometry","OctahedronGeometry","PlaneBufferGeometry","TorusBufferGeometry","BoxGeometry","BoxBufferGeometry","DoubleSide","TransformGizmo","Vector3","Matrix4","Euler","Quaternion","Raycaster","Vector2","PerspectiveCamera","OrthographicCamera","STLViewPort","canvas","width","height","onChange","onNewModel","self","canvasWidth","canvasHeight","models","effectController","THREE","Color","init","camera","up","set","position","scene","Scene","ambientLight","AmbientLight","ambientLightColor","add","directionalLight","DirectionalLight","directionalLightColor","directionalLight2","renderer","WebGLRenderer","antialias","setClearColor","setSize","setPixelRatio","window","devicePixelRatio","gammaInput","gammaOutput","orbitControls","THREETK","domElement","enableDamping","dampingFactor","enablePan","addEventListener","render","transformControls","setRotationSnap","Math","degToRad","startTransform","endTransform","event","keyCode","lastMouseEvent","e","pickActiveModel","update","loadSTL","url","onLoad","load","geometry","addModelOfGeometry","modelToCopyTransformFrom","material","MeshStandardMaterial","modelInactiveColor","SmoothShading","metalness","roughness","stlModel","center","Box3","setFromObject","model","copy","negate","rotation","scale","push","activeModel","object","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","pointerVector","ray","setFromCamera","foundActiveModel","nextPointedModel","undefined","firstPointedModel","i","length","intersections","intersectObjects","children","makeModelActive","m","attach","detach","color","modelActiveColor","removeActiveModel","index","indexOf","splice","remove","removeAllModels","splitActiveModel","originalModel","newGeometries","GeometryUtils","split","map","onlyOneOriginalModel","z","enabled","ko","bindingHandlers","numericValue","element","valueAccessor","allBindings","data","context","interceptor","computed","unwrap","value","isNaN","parseFloat","applyBindingsToNode","OverridesViewModel","parameters","array_keys","enum_keys","item_keys","boolean_keys","slicingViewModel","ARRAY_KEYS","ENUM_KEYS","observableArray","ITEM_KEYS","BOOLEAN_KEYS","ALL_KEYS","concat","Object","keys","forEach","k","observable","optionsForKey","key","updateOverridesFromProfile","profile","endings","stripEndings","_","isString","endsWith","slice","booleans","convertBoolean","BOOLS","boolType","b","isArray","v","onProfileChange","newValue","slicing","slicer","fetchSlicingProfile","profileAjax","abort","$","ajax","API_BASEURL","subscribe","toJS","result","mapping","hasOwnProperty","baseKey","replace","contains","OCTOPRINT_VIEWMODELS","ModelArranger","sort","a","w","h","area","max","min","msort","criteria","diff","n","applyPackResult","packer","fit","root","projectedRectOnXY","margin","modelBox","arrange","modelRectMap","reduce","Map","allPackers","crit","rects","get","GrowingPacker","packersSortedByArea","filter","some","location","hostname","config","install","SlicerViewModel","track","document","getElementById","webgl","empty","append","overridesViewModel","printerStateViewModel","printerProfilesViewModel","lockScale","selectedSTL","newPrint","show","target","file","force","enableSlicingDialog","tab","addToNewPrint","modal","clearPrint","addToExistingPrint","setSlicingViewModel","addSTL","resetSlicingViewModel","stlViewPort","BASEURL","onModelAdd","fixZPosition","hide","onModelRemove","updatePrinterBed","profileName","profiles","items","find","p","id","dim","volume","BEDSIZE_X_MM","BEDSIZE_Y_MM","depth","BEDSIZE_Z_MM","origin","ORIGIN_OFFSET_X_MM","ORIGIN_OFFSET_Y_MM","drawBedFloor","drawWalls","printerProfile","CANVAS_WIDTH","CANVAS_HEIGHT","requestData","onModelChange","walls","floor","applyBindings","PLUGIN_BASEURL","click","setMode","space","toggleValueInputs","change","applyValueInputs","parentDiv","hasClass","removeClass","addClass","input","blur","type","checked","val","toFixed","closest","log","bedLowMinZ","boundaryBox","sub","attr","PI","tempFiles","removeTempFilesAfterSlicing","inArray","payload","stl","files","delete","stl_location","socket","onMessage","sliceRequestData","slicingVM","group","destinationFilename","_sanitize","destinationExtensions","extensions","destination","any","extension","toLowerCase","groupCenter","extend","afterSlicing","sendSliceRequest","filename","JSON","stringify","jqXHR","textStatus","PNotify","title","text","form","FormData","Group","clone","tempFilename","tempSTLFilename","blobFromModel","exporter","Blob","parse","isPrinting","isPaused","canSliceNow","enableSliceButton","createText","font","parentObj","textGeometry","TextGeometry","extrudeMaterial","materialFront","materialSide","materialArray","textMaterial","MeshFaceMaterial","mesh","computeBoundingBox","textWidth","boundingBox","textHeight","segments","obj","PlaneGeometry","materialEven","materialOdd","materials","j","faces","materialIndex","receiveShadow","loader","FontLoader","wall1","rectShape","wall2","wall3","wall4","rectLength","rectWidth","Shape","moveTo","lineTo","rectGeom","ShapeGeometry","computeDestinationFilename","inputFilename","substr","lastIndexOf","pos","Date","join"],"mappings":"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"}